Mobile Leo
==========



File format: leoq
+++++++++++++++++

- Use sqlite for storage
- Only ONE file per outline - embed @file nodes, images, other attachments (@url)

Schema 1 (abandoned)
********************



TextBlock
^^^^^^^^^

class TextBlock(Entity):
    """ Use for body text """
    has_field("compressed", Boolean)
    has_field("data", Binary, deferred = "True")
    
    belongs_to('node', of_kind="Node")

Node
^^^^

class Node(Entity):
    has_field('gnx', Unicode(20))
    has_field('h', UnicodeText)
    has_one('parent', of_kind="Node", 
    
    gnx = Field(Unicode(30))
    h = Field(UnicodeText)
    has_one('b', of_kind="TextBlock", inverse = "node")

Schema 2
********



@url http://techportal.ibuildings.com/2009/09/07/graphs-in-the-database-sql-meets-social-networks/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



Creation
^^^^^^^^


import sqlite3

treefrag_schema = """
drop table if exists blobs;

CREATE TABLE blobs (
 id INTEGER PRIMARY KEY,
 format INTEGER,
 data BLOB
);

drop table if exists nodes;

CREATE TABLE nodes (
 id INTEGER PRIMARY KEY,
 gnx VARCHAR(20) NOT NULL,
 
 h TEXT,
 bodyid INTEGER REFERENCES blobs(id)
);
 
drop table if exists edges;

CREATE TABLE edges (
 a INTEGER NOT NULL REFERENCES nodes(id),
 b INTEGER NOT NULL REFERENCES nodes(id),
 pos INTEGER NOT NULL,
 PRIMARY KEY (a, b, pos)
);
 
CREATE INDEX a_idx ON edges (a);
CREATE INDEX b_idx ON edges (b);
"""

class TreeFrag:
    def __init__(self, dbfile):
        self.conn = sqlite3.connect(dbfile)
        # gnx => node id
        self.gnxs = {}

    def reset_db(self):
        cu = self.conn.cursor()
        cu.executescript(treefrag_schema)
        self.conn.commit()

    def dump_node(self, p):
        
        cu = self.conn.cursor()
        body = sqlite3.Binary(p.b)
        cmd = "insert into blobs (data) values (?)"
        t = (body,)
        cu.execute(cmd, t)
        bod_id = cu.lastrowid
        print "inserted", bod_id
        
        cmd = "insert into nodes (gnx, h, bodyid) values (?, ?, ?)"
        t = p.gnx, p.h, bod_id
        cu.execute(cmd, t)
        node_id = cu.lastrowid
        self.conn.commit()
        return node_id
        
                
    def write_vnodes(self, c, pos = None):
        if pos is None:
            it = c.unique_nodes()
        else:
            it = pos.unique_subtree()
        for p in it:
            nid = self.dump_node(p)
            self.gnxs[p.gnx] = nid
            
            
        if pos:
            self.dump_node(pos)
        
        
def test(p):
    tf = TreeFrag("/tmp/treefrag.db")
    tf.reset_db()
    tf.write_vnodes(p)       
    
test(p)

Browser
^^^^^^^

import os
os.system("sqlitebrowser /tmp/treefrag.db")

Implementation strategy
+++++++++++++++++++++++

- Qt, QML, C++

- "Drill down" through the tree

- Also flat view with search bar

