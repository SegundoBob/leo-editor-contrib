Mobile Leo
==========



File format: leoq
+++++++++++++++++

- Use sqlite for storage
- Only ONE file per outline - embed @file nodes, images, other attachments (@url)

Schema 1 (abandoned)
********************



TextBlock
^^^^^^^^^

class TextBlock(Entity):
    """ Use for body text """
    has_field("compressed", Boolean)
    has_field("data", Binary, deferred = "True")
    
    belongs_to('node', of_kind="Node")

Node
^^^^

class Node(Entity):
    has_field('gnx', Unicode(20))
    has_field('h', UnicodeText)
    has_one('parent', of_kind="Node", 
    
    gnx = Field(Unicode(30))
    h = Field(UnicodeText)
    has_one('b', of_kind="TextBlock", inverse = "node")

Schema 2
********



@url http://techportal.ibuildings.com/2009/09/07/graphs-in-the-database-sql-meets-social-networks/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



tables
^^^^^^

drop table if exists blobs;

CREATE TABLE blobs (
 id INTEGER PRIMARY KEY,
 compressed INTEGER,
 data BLOB
);

drop table if exists nodes;

CREATE TABLE nodes (
 id INTEGER PRIMARY KEY,
 gnx VARCHAR(20) NOT NULL,
 
 h TEXT,
 bodyid INTEGER REFERENCES blobs(id)
);
 
drop table if exists edges;

CREATE TABLE edges (
 a INTEGER NOT NULL REFERENCES nodes(id),
 b INTEGER NOT NULL REFERENCES nodes(id),
 pos INTEGER NOT NULL,
 PRIMARY KEY (a, b, pos)
);
 
CREATE INDEX a_idx ON edges (a);
CREATE INDEX b_idx ON edges (b);

@a tables
~~~~~~~~~



Creation
^^^^^^^^


import sqlite3

conn = sqlite3.connect('/tmp/example')

cu = conn.cursor()
ts = c.vs['tables']

cu.executescript(ts)
conn.commit()

Implementation strategy
+++++++++++++++++++++++

- Qt, QML, C++

- "Drill down" through the tree

- Also flat view with search bar

