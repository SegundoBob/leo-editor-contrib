<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="32" clone_windows="0"/>
<globals body_outline_ratio="0.45231958762886598">
	<global_window_position top="61" left="295" height="776" width="889"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="ekr.20040220163258"><vh>Widgets</vh>
<v t="ekr.20040220163258.1"><vh>CheckBoxTreeWidget</vh>
<v t="ekr.20040220163258.2"><vh>History</vh></v>
<v t="ekr.20040220163258.3" a="E"><vh>Documentation</vh>
<v t="ekr.20040220163258.4" a="E"><vh>The Checkbox Tree Component</vh>
<v t="ekr.20040220163258.5"><vh>How it works</vh></v>
<v t="ekr.20040220163258.6"><vh>How to Use</vh></v>
</v>
</v>
<v t="ekr.20040220163258.7" a="E" tnodeList="ekr.20040220163258.7,ekr.20040220163258.10,ekr.20040220163258.11,ekr.20040220163258.12,ekr.20040220163258.13,ekr.20040220165235,ekr.20040220163258.14,ekr.20040220163258.15,ekr.20040220163258.16,ekr.20040220163258.17,ekr.20040220181802,ekr.20040220181802.1,ekr.20040220163258.18,ekr.20040220163258.19,ekr.20040220170131,ekr.20040220163258.21,ekr.20040220163258.22,ekr.20040220163258.23,ekr.20040220165235.1,ekr.20040220165235.2,ekr.20040220165235.3,ekr.20040220165235.4,ekr.20040220181802.2,ekr.20040220181802.3,ekr.20040220165235.5,ekr.20040220163258.26,ekr.20040220163258.27,ekr.20040220163258.28"><vh>@file widgetcheckboxtree.htm</vh>
<v t="ekr.20040220163258.10" a="E"><vh>&lt;&lt; head &gt;&gt;</vh>
<v t="ekr.20040220163258.11"><vh>&lt;&lt; CSS &gt;&gt;</vh></v>
<v t="ekr.20040220163258.12" a="E"><vh>Checkbox Tree Functions</vh>
<v t="ekr.20040220163258.13"><vh>&lt;&lt; data &gt;&gt;</vh></v>
<v t="ekr.20040220165235"><vh>clsCheckboxTree</vh></v>
<v t="ekr.20040220163258.14" a="M"><vh>drawCheckboxTree</vh>
<v t="ekr.20040220163258.15"><vh>&lt;&lt; Figure out the Styling &gt;&gt;</vh></v>
<v t="ekr.20040220163258.16"><vh>&lt;&lt; Create the Checkbox Html &gt;&gt;</vh></v>
<v t="ekr.20040220163258.17" a="E"><vh>&lt;&lt; Create the Button Html &gt;&gt;</vh>
<v t="ekr.20040220181802"><vh>&lt;&lt; create text button &gt;&gt;</vh></v>
<v t="ekr.20040220181802.1"><vh>&lt;&lt; create image button &gt;&gt;</vh></v>
</v>
<v t="ekr.20040220163258.18"><vh>&lt;&lt; Add the Html for the Row &gt;&gt;</vh></v>
<v t="ekr.20040220163258.19"><vh>&lt;&lt; Add Border &gt;&gt;</vh></v>
</v>
<v t="ekr.20040220163258.20"><vh>toggleTree &amp; allies</vh>
<v t="ekr.20040220170131"><vh>toggleTree</vh></v>
<v t="ekr.20040220163258.21"><vh>flagIt</vh></v>
<v t="ekr.20040220163258.22"><vh>toggleChildren</vh></v>
<v t="ekr.20040220163258.23"><vh>toggleParents</vh></v>
</v>
<v t="ekr.20040220163258.24" a="M"><vh>Utility Tree Functions</vh>
<v t="ekr.20040220165235.1"><vh>getSiblings</vh></v>
<v t="ekr.20040220165235.2"><vh>getParent</vh></v>
<v t="ekr.20040220165235.3"><vh>getChildren</vh></v>
</v>
<v t="ekr.20040220163258.25"><vh>collapse functions</vh>
<v t="ekr.20040220165235.4"><vh>toggleNodeOpen</vh>
<v t="ekr.20040220181802.2"><vh>&lt;&lt; handle text button &gt;&gt;</vh></v>
<v t="ekr.20040220181802.3"><vh>&lt;&lt; handle image button &gt;&gt;</vh></v>
</v>
<v t="ekr.20040220165235.5"><vh>collapse (not used)</vh></v>
</v>
</v>
<v t="ekr.20040220163258.26" a="E"><vh>Other Functions</vh>
<v t="ekr.20040220163258.27"><vh>onload</vh></v>
</v>
</v>
<v t="ekr.20040220163258.28"><vh>&lt;&lt; body &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040220163258.29"><vh>Deprecated</vh>
<v t="ekr.20040220163258.30"><vh>toggleTreeOff</vh></v>
<v t="ekr.20040220220152"><vh>toggleTreeOn</vh></v>
<v t="ekr.20040220220152.1"><vh>toggleTree</vh></v>
<v t="ekr.20040220220152.2"><vh>toggleChildren</vh></v>
<v t="ekr.20040220220152.3"><vh>toggleParents</vh></v>
<v t="ekr.20040220163258.32"><vh>drawTreeSelect  (old version)</vh></v>
</v>
</v>
<v t="ekr.20040221091434" a="E" tnodeList="ekr.20040221091434,ekr.20040221091434.2,ekr.20040221091434.3"><vh>@file treetest.html</vh>
<v t="ekr.20040221091434.2"><vh>&lt;&lt; head &gt;&gt;</vh></v>
<v t="ekr.20040221091434.3"><vh>&lt;&lt; body &gt;&gt;</vh></v>
</v>
<v t="ekr.20040221085319" a="E" tnodeList="ekr.20040221085319,ekr.20040221091434.4,ekr.20040221085319.1,ekr.20040221085319.2,ekr.20040221085319.3,ekr.20040221085319.4,ekr.20040221085319.5,ekr.20040221085319.7,ekr.20040221085319.8,ekr.20040221085319.9,ekr.20040221090505,ekr.20040221090505.1,ekr.20040221090505.2,ekr.20040221090505.3,ekr.20040221090505.4,ekr.20040221090505.5,ekr.20040221085319.10"><vh>@file tree.js2</vh>
<v t="ekr.20040221091434.4"><vh>&lt;&lt; copyright &gt;&gt;</vh></v>
<v t="ekr.20040221085319.1"><vh>preloadIcons</vh></v>
<v t="ekr.20040221085319.2"><vh>createTree</vh></v>
<v t="ekr.20040221085319.3"><vh>getArrayId</vh></v>
<v t="ekr.20040221085319.4"><vh>setOpenNodes</vh></v>
<v t="ekr.20040221085319.5"><vh>isNodeOpen</vh></v>
<v t="ekr.20040221085319.7"><vh>hasChildNode</vh></v>
<v t="ekr.20040221085319.8"><vh>lastSibling</vh></v>
<v t="ekr.20040221085319.9"><vh>addNode</vh>
<v t="ekr.20040221090505"><vh>&lt;&lt; Write out line &amp; empty icons &gt;&gt;</vh></v>
<v t="ekr.20040221090505.1"><vh>&lt;&lt; put in array line &amp; empty icons &gt;&gt;</vh></v>
<v t="ekr.20040221090505.2"><vh>&lt;&lt; Write out join icons &gt;&gt;</vh></v>
<v t="ekr.20040221090505.3"><vh>&lt;&lt; Start link &gt;&gt;</vh></v>
<v t="ekr.20040221090505.4"><vh>&lt;&lt; Write out folder &amp; page icons &gt;&gt;</vh></v>
<v t="ekr.20040221090505.5"><vh>&lt;&lt; write out divs and recurse &gt;&gt;</vh></v>
</v>
<v t="ekr.20040221085319.10"><vh>oc</vh></v>
</v>
<v t="ekr.20040221092401" a="TV" tnodeList="ekr.20040221092401"><vh>@file example01.html</vh></v>
</vnodes>
<tnodes>
<t tx="ekr.20040220163258">DHTML Components

Copyleft 2002 by Joe Orr</t>
<t tx="ekr.20040220163258.1">CheckboxTree Widget

Creates a tree of checkboxes. For more information see the documentation nodes under this node.

Author: Joe Orr orrj@nycircuits.com
Copyleft 2002 Joe Orr</t>
<t tx="ekr.20040220163258.2">Created April 2001

version 1.0 April 18, 2001
DOM2 compatibility added (e.g. Netscape) Nov 20, 2002

For TODO items, search this file for TODO.</t>
<t tx="ekr.20040220163258.3">For documentation see child nodes of this node.</t>
<t tx="ekr.20040220163258.4">@nocolor

This component is used for drawing a tree of checkboxes. Clicking on a checkbox
checks or unchecks all descendant checkboxes, and checks or unchecks parent 
branches as necessary. The tree can be made collapsible or not.

The scripts are not packaged as a single object, because the functions which
check and uncheck a branch, and open and close branches, use a DOM collection.
This allows the functions to be attached directly to a checkbox. The functions
could also be used with other checkbox collections than that of the 
Checkbox Tree Component contained in this file.

See the Leo File for more info.

</t>
<t tx="ekr.20040220163258.5">The drawCheckboxTree function creates a checkbox for each line of data in
its "items" associative array. Each checkbox gets the following attributes:

id       = this.container + "Items" (this.container is the id of the div tag
           in which the component will be drawn.
ccode    = key of one item of data
cvalue   = value of one item of data
rowIndex = This is a counter that increments by one for each checkbox added to
           the tree. The reason this is called a rowIndex is that each checkbox
		   has its own row. There are never two checkboxes in the same row.
colIndex = The checkboxes are displayed in a table, and this index indicates
           what column a given checkbox is in. This is equivalent to the "depth"
		   of a node.
onclick = "toggleTree(this)"


The following diagram might be helpful for understanding the
role of the rowIndex and colIndex attributes:

        col1     col2
       _______________
row1  |check1 |       |
row2  |       |check2 |
row3  |check3 |       |
row4  |       |check4 |
      |_______|_______|

Since all of the checkboxes get the same name/id, they can be accessed via
the DOM as a collection with the same name as the ID. 
The tree manipulation functions access this collection by asking
the object that was clicked on (this) what its id is. 

A number of general purpose tree manipulation functions have been
created such as getParent, getSiblings, etc. These functions take
as input an html element which has colIndex and rowIndex attributes,
and return an element or collection of elements as appropriate.

The function for setting the checkboxes of a tree branch on or off
is called toggleTree. It is attached to a checkbox as toggleTree(this).
The checkbox itself is passed to the toggleTree function. The function
can get the rowIndex and colIndex of the checkbox from the checkbox
attributes. It can also get the value of the id of the checkbox, so 
it knows which collection of checkboxes to manipulate. Since it
knows which collection of checkboxes to manipulate, and knows the
position of checkbox that was clicked, it can perform any tree
type operation on the collection of checkboxes.</t>
<t tx="ekr.20040220163258.6">@nocolor

To deploy this component, include the functions in the Checkbox Tree Functions
node in your webpage. Then to draw the component on the page:

@color
@language java

var myCheckboxTree = new clsCheckboxTree(myItems, "CheckboxTree");
myCheckboxTree.draw();

@nocolor

The "myItems" parameter is an associative array (i.e., a function) containing
keys with semi-colon delimited values. The second parameter is the id of
the div tag or other element where you want the component to be placed.</t>
<t tx="ekr.20040220163258.7">@language html

&lt;!-- This page is HEAVILY documented in LEO. For documentation for this page, see the LEO source file. 
     This page was created from a LEO source file named "widgets.leo".
--&gt;

&lt;html&gt;
&lt;head&gt;
&lt;&lt; head &gt;&gt;
&lt;/head&gt;

&lt;body 
  bgcolor="gainsboro"
  topmargin="2" 
  leftmargin="2" 
  marginheight="2" 
  marginwidth="2" 
  onload="window_onload()"
&gt;

&lt;&lt; body &gt;&gt;
&lt;/body&gt;
&lt;/html&gt;</t>
<t tx="ekr.20040220163258.10">&lt;title&gt;CheckboxTree Demo&lt;/title&gt;

&lt;&lt; CSS &gt;&gt;

&lt;script&gt;
@others
&lt;/script&gt;
</t>
<t tx="ekr.20040220163258.11">@code

&lt;style type="text/css"&gt;

BODY        {font-family:Arial,sans-serif; font-size:8pt; font-weight:100;}
TD          {font-family:Arial,sans-serif; font-size:8pt; font-weight:100; text-transform:capitalize;}
SELECT      {font-family:Arial,sans-serif; font-size:12px; font-weight:normal}
OPTION      {font-family:Arial,sans-serif; font-size:12px; font-weight:normal}
TH          {font-family:Arial,sans-serif; font-size:12px; font-weight:bold; text-align:left}
BUTTON      {font-size:14; font-weight:bold; width:30; text-align:center}
INPUT       {font-family:Arial; font-size:10pt;}
.treeSelect {}
.line1      {background-color:red; line-height:1px;}
.spacer1    {background-color:white; line-height:4px;}
.spacerCell {width:40}
.topicLine  {background-color:"yellow"} // #B1CCCE}
.nodeButton {font-family:Arial,sans-serif;font-size:16px; width=14; line-height:12px; text-align:center; cursor:hand} 
.nodeButtonImage {cursor:hand;}

&lt;/style&gt;</t>
<t tx="ekr.20040220163258.12">@language java

// a function which serves as an associative array to hold the data
function items() {
}
var myItems = new items();
var myItemsArray = new Array();

&lt;&lt; data &gt;&gt;

@others

// Only the drawCheckboxTree gets attached to the 
// object, because the checkbox and collapse
// functions are not methods but rather functions
// that operate on collections of nodes. Each of
// these nodes knows which DOM collection it is a
// member of, and this is all that is needed to
// make them operate in synch. For more information,
// see the LEO documentation.

clsCheckboxTree.prototype.draw = drawCheckboxTree;</t>
<t tx="ekr.20040220163258.13">// load the data into the associative array
myItems["170,171"] = "INFLATION;NOTE;VARIABLE";
myItems["168,169"] = "INFLATION;TREASURY;BOND";
myItems["114,115,177"] = "LONG TERM;AGENCY;BOND";
myItems["116"] = "LONG TERM;AGENCY;ZERO";
myItems["1,39,70,75,137,138,139,172,175,211,212,213,214,215,216,217"] = "LONG TERM;CORP;BOND";
myItems["8,174,224"] = "LONG TERM;CORP;MTN";
myItems["173,225"] = "LONG TERM;CORP;MTN NO-EOM";
myItems["17,30,31,32,33,34,35,36,42,43,44,45,46,47,48,49"] = "LONG TERM;EURO;BOND";
myItems["9,14"] = "LONG TERM;TREASURY;BOND";
myItems["10,11,15"] = "LONG TERM;TREASURY;NOTE";
myItems["77"] = "LONG TERM;TREASURY;ZERO";
myItems["203,204,205,206"] = "MUNICIPAL;CD;INT AT MAT";
myItems["197"] = "MUNICIPAL;CP;DISCOUNT";
myItems["198"] = "MUNICIPAL;CP;INT AT MAT";
myItems["210"] = "MUNICIPAL;NOTE;MTN AT MAT";
myItems["207,208,209"] = "MUNICIPAL;NOTE;VAR AT MAT";
myItems["81"] = "OTHER;LTD PARTNR;LTD";
myItems["83"] = "OTHER;REV CREDIT;REV";
myItems["78"] = "OTHER;STOCK;COMMON";
myItems["118,119,120,121"] = "OTHER;STOCK;PREFERRED";
myItems["132"] = "OTHER;WARRANT;BOND";
myItems["80"] = "OTHER;WARRANT;COMMON";
myItems["105"] = "SHORT TERM;ABS;DISCOUNT";
myItems["104"] = "SHORT TERM;ABS;INT AT MAT";
myItems["112"] = "SHORT TERM;ABS;TERM";
myItems["128"] = "SHORT TERM;AGENCY;BOND";
myItems["12,13"] = "SHORT TERM;AGENCY;DISCOUNT";
myItems["65"] = "SHORT TERM;BA;DISCOUNT";
myItems["21,22,23,41"] = "SHORT TERM;CD;DISCOUNT";
myItems["190"] = "SHORT TERM;CD;EUEU CD";
myItems["196"] = "SHORT TERM;CD;EURO CD";
myItems["193"] = "SHORT TERM;CD;EURYEN CD";
myItems["20,24,25,26"] = "SHORT TERM;CD;INT AT MAT";
myItems["189"] = "SHORT TERM;CD;STERLG. CD";
myItems["19,27,28,29,38"] = "SHORT TERM;CD;TERM";
myItems["192"] = "SHORT TERM;CD;YENYEN CD";
myItems["63"] = "SHORT TERM;CP;DISCOUNT";
myItems["195"] = "SHORT TERM;CP;EURYEN CP";
myItems["64"] = "SHORT TERM;CP;INT AT MAT";
myItems["194"] = "SHORT TERM;CP;YENYEN CP";
myItems["102"] = "SHORT TERM;LOAN PART;INT AT MAT";
myItems["106"] = "SHORT TERM;LOC;DISCOUNT";
myItems["99,100"] = "SHORT TERM;NOTE;BANK NOTE";
myItems["113"] = "SHORT TERM;NOTE;BOND";
myItems["107,122,123,124,133,134,145,146,147"] = "SHORT TERM;NOTE;FLOATER";
myItems["160,163,166"] = "SHORT TERM;NOTE;FLT AT MAT";
myItems["101,140,176"] = "SHORT TERM;NOTE;MTN";
myItems["167"] = "SHORT TERM;NOTE;MTN AT MAT";
myItems["150,153,157"] = "SHORT TERM;NOTE;VAR AT MAT";
myItems["108,125,126,127,135,136,141,142,143,144"] = "SHORT TERM;NOTE;VARIABLE";
myItems["103"] = "SHORT TERM;REPO;INT AT MAT";
myItems["98"] = "SHORT TERM;TIME DEPO;INT AT MAT";
myItems["129"] = "SHORT TERM;TREASURY;BOND";
myItems["187"] = "SHORT TERM;TREASURY;BTBILL";
myItems["188"] = "SHORT TERM;TREASURY;FTBILL";
myItems["185"] = "SHORT TERM;TREASURY;GTBILL";
myItems["184"] = "SHORT TERM;TREASURY;ITBILL";
myItems["182"] = "SHORT TERM;TREASURY;JTBILL";
myItems["130"] = "SHORT TERM;TREASURY;NOTE";
myItems["191"] = "SHORT TERM;TREASURY;NTBILL";
myItems["16,131"] = "SHORT TERM;TREASURY;TBILL";
myItems["183"] = "SHORT TERM;TREASURY;UTBILL";
myItems["66,67,84,109,110,111,178,218,219,220"] = "STRUCTURED;MULTI;ABS";
myItems["68,69,74"] = "STRUCTURED;MULTI;CMO";
myItems["89,90,91"] = "STRUCTURED;MULTI;MPT";
myItems["92,93,94,95,96,97,179,180,181"] = "STRUCTURED;SINGLE;ABS";
myItems["55,221,222,223"] = "STRUCTURED;SINGLE;MBS";
myItems["85,86,87,88"] = "STRUCTURED;SINGLE;PRJCT LOAN";
myItems["59"] = "STRUCTURED;SINGLE;TBA - MBS";
</t>
<t tx="ekr.20040220163258.14">// function to draw the CheckboxTree html

function drawCheckboxTree() {
  var cells;                   // will hold one row of data
  var oldCells = new Array();  // will remember data from last row for this cell
  var cellKey;
  var cellValue;               
  var cellCode;
  var dhtmlCheckbox;           
    
  var dhtmlCheckboxTree = '&lt;table border="0" cellpadding="1" width="300" align="center" cellspacing="1" bgcolor="white"&gt;';

  // find out the number of columns by extracting the columns of the first item
  for (rowKey in this.items) {
    cells = this.items[rowKey].split(";"); 
	break;
  }
  numCols = cells.length;

  // oldCells remembers what was in a given column in the last row.
  // initialize this to a value that should never match. We need to
  // initialize this so that the oldCells array has the same number
  // of columns as does the data
  for (c = 0; c &lt; numCols; c++) oldCells[c] = "no way jose"; 
  
    var c;     // cell (column) index
    var r = 0; // row index
    for (rowKey in this.items) { 
      cells = this.items[rowKey].split(";");    
      for (c = 0; c &lt; numCols; c++) {
	    cellValue = cells[c].toLowerCase(); 

        // skip cells that have repeat info for the column
        if (oldCells[c] == cellValue &amp;&amp; c &lt; numCols -1) {
          oldCells[c] = cellValue;   // save it
	      continue;
        }
        oldCells[c] = cellValue;     // save it
 	
        &lt;&lt; figure out the styling &gt;&gt;
        &lt;&lt; create the checkbox html &gt;&gt;
	  
       // if the checkbox tree is supposed to be collapsible, add a +/- button
       // We have to give this an attribute called "linkedID" that indicates which
       // checkbox collection this button is linked to. We also have to give it
       // rowIndex and colIndex attributes, just like the checkbox elements.
       if (this.collapsible &amp;&amp; c &lt; numCols - 1) {  
	     &lt;&lt; create the button html &gt;&gt;
	   }  

       // If we've found a cell that we are going to write out, make a row
       // for it, with the TD colspan equal to the number of remaining cols
       // and with TD elements preceding it equal in number to c (the col index)	  
       &lt;&lt; add the HTML for the row &gt;&gt;
	}		
  }
  dhtmlCheckboxTree += '&lt;/table&gt;';

  &lt;&lt; add border &gt;&gt;

  // we've got the table built, now stick it in the DIV or other tag that
  // was specified when this object was constructed.
  eval('var ' + this.container + ' = document.getElementById("' + this.container + '")');
  eval(this.container + ".innerHTML = dhtmlCheckboxTree;");  
}
</t>
<t tx="ekr.20040220163258.15">switch (c) {
	case 0:  cellClass = "topicLine"; break;
	default: cellClass = "";
}</t>
<t tx="ekr.20040220163258.16">strJS = 'onclick="toggleTree(this);"';
cellKey = rowKey;

// if this isn't a bottom level node (leaf node), we don't want it to
// submit a value, so erase the key
if (c != numCols - 1) cellKey = "";

dhtmlCheckbox = '&lt;input type="checkbox" '
	+ 'id="' + this.itemsID + '" ' 
	+ 'name="' + this.itemsID + '" '
	+ 'cvalue="' + cellValue + '" ' 
	+ 'ccode="' + cellKey + '" ' 
	+ 'rowIndex = "' + r + '" '
	+ 'colIndex = "' + c + '" '
	+ strJS 
	+ '&gt;';</t>
<t tx="ekr.20040220163258.17">if (this.textButton) {
	// the + or - text character will be used for the button
	&lt;&lt; create text button &gt;&gt;
} else {
	&lt;&lt; create image button &gt;&gt;
}

dhtmlCheckbox = buttonHTML + dhtmlCheckbox;</t>
<t tx="ekr.20040220163258.18">r++;
dhtmlCheckboxTree += '&lt;tr class="' + cellClass + '"&gt;';
for (i = 0; i &lt; c; i++)
	dhtmlCheckboxTree += '&lt;td class="spacerCell"&gt;&amp;nbsp;&lt;/td&gt;';

dhtmlCheckboxTree += 
	'&lt;td colspan="' + (numCols - c) + '"&gt;' 
	+ dhtmlCheckbox 
	+ cellValue 
	+ '&lt;/td&gt;';

dhtmlCheckboxTree += '&lt;/tr&gt;';</t>
<t tx="ekr.20040220163258.19">// add a border by putting the table in a table if this was chosen in the constructor.

if (this.hasBorder) {
	dhtmlCheckboxTree = 
	   '&lt;table align="center" cellpadding=0 cellpadding=0 bgcolor="#B1CCCE"&gt;&lt;tr&gt;&lt;td&gt;' 
	  + dhtmlCheckboxTree 
	  + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
}</t>
<t tx="ekr.20040220163258.20"></t>
<t tx="ekr.20040220163258.21">/**
 * flagIt  check or uncheck a checkbox and add a style.
 *
 * @me         the checkbox to be marked.
 * @markValue  true or false: whether to check the box 
 *
 **/
function flagIt(me, markValue) {

   me.checked = markValue;
  
  // Following block is for highlighting the cell which contains the selected checkbox.
  //if (markValue) {
  //  if (me.colIndex == 2) me.parentElement.style.backgroundColor = 'aquamarine';
  //} else {
  // // TODO: save and restore the existing style
  //  if (me.colIndex != 0) me.parentElement.style.backgroundColor = 'white';
  //  //if (me.colIndex == 0) me.parentElement.style.backgroundColor = "#B1CCCE";
  //}
  
}</t>
<t tx="ekr.20040220163258.22">/**
 * toggleChildren  This is a recursive function that uses getChildren to get a list
 * of children checkboxes and then sets their values to checked or unchecked.
 *
 * @me            item (an element with colIndex and rowIndex attributes)
 * @checkValue    true or false: set checkbox value
 *
 * For more documentation, see the LEO file for this program. 
 */
 
function toggleChildren(me, checkValue) {
  
   var i = 0; 
   var children = getChildren(me);

   if (children.length == 0) return;

   for (i = 0; i &lt; children.length; i++) {
     flagIt(children[i], checkValue);

	 //recurse
	 toggleChildren(children[i], checkValue);

   }  
}
</t>
<t tx="ekr.20040220163258.23">/**
 * toggleParents  turn all ancestor checkboxes on or off (recursive).
 * of children checkboxes and then sets their values to checked or unchecked.
 *
 * @me            item (an element with colIndex and rowIndex attributes)
 * @checkValue    true or false: set checkbox value
 */
function toggleParents(me, checkValue) {

  var i = 0;
   
  // If we are turning the checkbox off, we need to first
  // check and see if there are any siblings besides the current item
  // that are checked on. If there are, we don't.
  if (! checkValue) {
    var siblings = getSiblings(me);
    var rowIndex = me.rowIndex;
    for (i = 0; i &lt; siblings.length; i++) {
      if (siblings[i].checked != checkValue &amp;&amp; siblings[i].getAttribute('rowIndex') != rowIndex) return;
    }
  } 
  
  // get the parent, if there is one, flag it 
  var parent = getParent(me);
  if (parent == undefined) return;
  flagIt(parent, checkValue);

  // recurse
  toggleParents(parent, checkValue);
  
}</t>
<t tx="ekr.20040220163258.24"></t>
<t tx="ekr.20040220163258.25"></t>
<t tx="ekr.20040220163258.26">@language java

var myCheckboxTree = new clsCheckboxTree(myItems, "CheckboxTree", true, false);

@others</t>
<t tx="ekr.20040220163258.27">var CheckboxTreeItems;

function window_onload() {

 // draw the checkboxtree
 myCheckboxTree.draw();

 // loop thru the checkboxes and set the ones that have been
 var r = 0;
 var ccode = "";
 var item;
 CheckboxTreeItems =document.getElementsByName("CheckboxTreeItems");

 for (r = 0; r &lt; CheckboxTreeItems.length; r++) {

   // get next checkbox
   item = CheckboxTreeItems[r];
   
   // if the ccode attribute is blank, it means the checkbox isn't a leaf
   // node checkbox, i.e. it doesn't have any data value
   if (item.ccode == "") continue;

 }

 // set the focus to the first checkbox, bc otherwise it will
 // get set to one of the submit buttons, which looks ugly
 //CheckboxTreeItems[0].focus();

}
</t>
<t tx="ekr.20040220163258.28">&lt;script&gt;
  var CheckboxTreeItemsCollapseFlag;
&lt;/script&gt;

&lt;br&gt;

&lt;div 
  id="CheckboxTree" 
  style="position:absolute; top: 0; width:316; height:440 ; overflow-y:scroll"&gt;
&lt;/div&gt;

&lt;form name="submitForm" action="wherever.jsp" method="post" &gt;
   &lt;input type=hidden name=data&gt;
   &lt;input type=hidden name=action&gt;
&lt;/form&gt;

&lt;div style="position:absolute; width:316; top:460"&gt;

&lt;/div&gt;

&lt;p&gt;Edward&lt;/p&gt;</t>
<t tx="ekr.20040220163258.29">@language java</t>
<t tx="ekr.20040220163258.30">function toggleTreeOff (me, r) {

  // toggle all child nodes off
  var prevColIndex = 0;
  for (i = r; i &lt; criteriaItem.length; i++) {
    if (criteriaItem(i).colIndex &lt; prevColIndex) break;
    criteriaItem(i).checked = false;
    prevColIndex = criteriaItem(i).colIndex;
  }
  
  var minColIndex = 9999;
  var siblings;
  var parent;
  siblings = getSiblings(criteriaItem(i));
  while (siblings != undefined) {
    for (item in siblings) {
      if (item.checked) return;
      parent = getParent(criteriaItem(i));
	  siblings = getSiblings(parent);
    }
  }
  
//  var foundSiblingChecked;
//  var oldColIndex = me.colIndex;  
//  for (i = r - 1; i &gt;= 0; i--) {
//    colIndex = criteriaItem(i).colIndex;

//    if (siblingIsChecked(criteriaItem(i)) break;
	
//	oldColdIndex = colIndex;
//    if (minColIndex &gt; colIndex) criteriaItem(i).checked = false;

//	if (colIndex == 0) break;
//    minColIndex = Math.min(colIndex, minColIndex);
//  }
}

</t>
<t tx="ekr.20040220163258.32">// function to draw the treeselect widget
function drawTreeSelect() {
  var cells;
  var oldCell;
  var oldCells = new Array();
  var cellValue;
  var cellCode;
  var cellHTML;
  var newSetFlag;
  
  var dhtmlTreeSelect = '&lt;table bgcolor="white" border="0" align="center" width="300" cellspacing="0" cellpadding="0"&gt;';

  for (rowKey in this.items) {
	dhtmlTreeSelect += '&lt;tr&gt;';
	cells = this.items[rowKey].split(";");
	for (c = 0; c &lt; cells.length; c++) {
	  cellValue = cells[c].toLowerCase();
	  if (oldCells.length == cells.length) {
        if (cellValue == oldCells[c] &amp;&amp; c &lt; cells.length - 1) {
		  cellValue = "";
		} else {
		  if (c == 0) newSetFlag = true;
        }
	  }

      if (newSetFlag){dhtmlTreeSelect += 
        "&lt;tr&gt;&lt;td class='spacer1'&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;" +
	    "&lt;tr class='line1'&gt;&lt;td class='line1'&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;" +
        "&lt;tr&gt;&lt;td class='spacer1'&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;";
        newSetFlag = false;
      }

      oldCells[c] = cells[c].toLowerCase();
	  cellHTML = "&amp;nbsp;";
	  if (cellValue != "") {
        cellHTML = '&lt;input type="checkbox" id="criteriaItem" cvalue="' 
	    + cellValue + '"  ccode="' + rowKey + '"&gt;' + cellValue; 
	  }
	  dhtmlTreeSelect += '&lt;td nowrap&gt;' + cellHTML + '&lt;/td&gt;';		          
	}
	dhtmlTreeSelect += '&lt;/tr&gt;';

  }
//  dhtmlTreeSelect += 
//    "&lt;tr&gt;&lt;td class='spacer1'&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;" +
//	"&lt;tr class='line1'&gt;&lt;td class='line1'&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;" +
//    "&lt;tr&gt;&lt;td class='spacer1'&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;";

  dhtmlTreeSelect += '&lt;/table&gt;';
  dhtmlTreeSelect = '&lt;table bgcolor="red" align="center" cellpadding="1"&gt;&lt;tr&gt;&lt;td&gt;' + dhtmlTreeSelect + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
  eval(this.container + ".innerHTML = dhtmlTreeSelect;");  

}
</t>
<t tx="ekr.20040220165235">/**
 * clsCheckboxTree: Constructor for tree select object
 *
 * @treeData   an object container the tree data as an associative array
 * @container  the id of the div tag (or other element) in which the checkbox tree 
 *             widget will be drawn.
 * @collapsible       if true, nodes will open and close
 * @hasBorder  if true, component will have an outside border
 *
**/
function clsCheckboxTree(treeData, container, collapsible, hasBorder) {

  this.items = treeData;
  this.container = container;
  this.itemsID = container + 'Items';

  // can open and close nodes?
  this.collapsible = collapsible;

  // display in scrolling window in window?
  this.hasBorder = hasBorder;
  
  // use text +/- button instead of graphic?
  this.textButton = false;
}</t>
<t tx="ekr.20040220165235.1">function getSiblings(me) {

   var siblings = new Array();
   siblings = getChildren(getParent(me));
   return siblings;
   
}</t>
<t tx="ekr.20040220165235.2">// get parent  of item that was clicked on. 

function getParent(me) {

  var r = me.getAttribute('rowIndex') / 1;

  if (me.colIndex == 0) return;
  
  eval("var startColIndex = " + me.id + "[r].getAttribute('colIndex');");
 
  startColIndex = startColIndex / 1;

  var parent;
  for (i = r - 1; i &gt;= 0; i--) {
    eval ("if (" + me.id + "[i].getAttribute('colIndex') &lt; startColIndex) parent = " + me.id + "[i];");
	if (parent != undefined) return parent;
  }

}</t>
<t tx="ekr.20040220165235.3">// getChildren  get the immediate descendant items of the current item
// For more documentation, see the LEO file for this program
function getChildren(me) {

  var i = 0;

  // return an empty array if there are no children
  if (me == undefined) return new Array();

  var r = me.getAttribute("rowIndex") / 1;  
  
  // Loop thru the item collection. For comments on this, see the getParent function.
  eval("var startColIndex = " + me.id + "[r].getAttribute('colIndex');");

  startColIndex = startColIndex / 1;
  var children = new Array();
  var colIndex;
  eval (
      "for (i = r + 1; i &lt; " + me.id + ".length; i++) {"
    + "  colIndex = " + me.id + "[i].getAttribute('colIndex');"
	+ "  if (colIndex &lt;= startColIndex) break;"
    + "  if (colIndex == startColIndex + 1) children.push(" + me.id + "[i]);"
    + "}" 
  );
  return children;
  
}
</t>
<t tx="ekr.20040220165235.4">// close or open all lower nodes
// @me   element (+/- node button) that was clicked
function toggleNodeOpen(me) {
  
  // Figure out whether to close or open this node.
  var display;
  
  if (me.tagName == 'TD') {
    &lt;&lt; handle text button &gt;&gt;
  } else {
  	&lt;&lt; handle image button &gt;&gt;
  }

  eval ('var maxR = ' + me.linkedID + '.length');
  var rowIndex = me.rowIndex / 1;
  var colIndex = me.colIndex;

  // Loop through the elements either hiding or showing. When we
  // get to an element that is "higher" in the tree, i.e. has a lower
  // column number than the element that was clicked on, exit the loop.
  eval ( 
      "for (r = rowIndex + 1; r &lt; maxR; r++) {"
    + "  if (" + me.linkedID + "(r).colIndex &lt;= colIndex) break;"
	+    me.linkedID + "(r).parentElement.parentElement.style.display = '" + display + "';"
    + "}"   
  ); 
}</t>
<t tx="ekr.20040220165235.5">// Used when attaching a collapse behavior to a checkbox.

function collapse(colIndex, itemsID) {
  
  if (colIndex == undefined) colIndex = 0;
  var r = 0;
  var children;
  eval (
    "do {"
  + "  if (" + itemsID + "(r).colIndex == colIndex) {"
  + "    display = 'none';"
  + "    if (" + itemsID + "(r).checked) display = 'block';"
  + "    r++;"  
  + "    do {"
  + "     " + itemsID + "(r).parentElement.parentElement.style.display = display;"
  + "      r++;"
  + "      if (r &gt;= " + itemsID + ".length) break;"
  + "    } while (" + itemsID + "(r).colIndex &gt; colIndex);"
  + "  } else {"
  + "  r++;"
  + "  }"
  + "} while (r &lt; " + itemsID + ".length);"
  );
  
}</t>
<t tx="ekr.20040220170131">// function to handle turning checkboxes on and off

/** toggleTree  Set all checkboxes of a given branch.
 *  @me  the checkbox element that was clicked on. All descendant and ancestor
 *       nodes will be set accordingly. For more documentation, see the LEO file.
 */
function toggleTree (me) {

  flagIt(me, me.checked);
  toggleChildren(me, me.checked);
  toggleParents(me, me.checked);   
}</t>
<t tx="ekr.20040220181802">buttonHTML = 
	' &lt;table align="left" ' 
	+ 'style="border:1px solid #000000; height:14px; cursor:hand" bgcolor="gainsboro" cellspacing="0"'
	+ ' cellpadding="0"&gt;'
	+ ' &lt;tr&gt;'
	+ ' &lt;td align="center"' 
	  +  ' class="nodeButton"'  
	  +  ' rowIndex = "' + r + '" '
	  +  ' colIndex = "' + c + '" '
	  +  ' linkedID="' + this.itemsID + '"' 
	  +  ' onclick="toggleNodeOpen(this)"&gt;'
	+ '&amp;#8722;' // this is a unicode minus sign
	+ ' &lt;/td&gt;'
	+ '&lt;/tr&gt;'
	+ '&lt;/table&gt;';</t>
<t tx="ekr.20040220181802.1">buttonHTML = 
	   ' &lt;img src="minus.gif"' 
	+  ' class="nodeButtonImage" '  
	+  ' rowIndex = "' + r + '" '
	+  ' colIndex = "' + c + '" '
	+  ' linkedID="' + this.itemsID + '"' 
	+  ' onclick="toggleNodeOpen(this)"&gt;';
	+  ' &gt;';</t>
<t tx="ekr.20040220181802.2">if (me.innerHTML == '+') {
	// The minus sign is unicode 8722. This
	// is different than the keyboard hyphen (-).
	me.innerHTML = "&amp;#8722;";
	display = 'block';
} else {
	me.innerHTML = "+";
	display = 'none';
}</t>
<t tx="ekr.20040220181802.3">var src = me.src;
if (src.search(/plus/) != -1) {
	// The minus sign is unicode 8722. This
	// is different than the keyboard hyphen (-).
	me.src = src.replace(/plus/, 'minus');
	display = 'block';
} else {
	me.src = src.replace(/minus/, 'plus');
	display = 'none';
}</t>
<t tx="ekr.20040220220152">function toggleTreeOn (me, r) {

  // toggle all child nodes on
  var startColIndex = me.colIndex;
 
  for (i = r + 1; i &lt; criteriaItem.length; i++) {
    if (criteriaItem(i).colIndex &lt;= startColIndex) break;
    criteriaItem(i).checked = true;
  }

  // toggle all parent nodes on
  var minColIndex = 9999;
  for (i = r; i &gt;= 0; i--) {
    colIndex = criteriaItem(i).colIndex;
    if (minColIndex &gt; colIndex) criteriaItem(i).checked = true;
	if (colIndex == 0) break;
    minColIndex = Math.min(colIndex, minColIndex);
  }
  return;
}</t>
<t tx="ekr.20040220220152.1">/** toggleTree
 * 
 *@me        a TD element
 *@colIndex  the column index of the TD element
 *
 **/

function toggleTree(me, colIndex, maxColIndex, checkValue) {

   toggleChildren(me, colIndex, maxColIndex, checkValue);
   toggleParents(me, colIndex, maxColIndex, checkValue);
}</t>
<t tx="ekr.20040220220152.2">function toggleChildren(me, colIndex, maxColIndex, checkValue) {

  try {
    if (checkValue == undefined) checkValue = me.firstChild.checked;
    var myRow = me.parentElement;
    var nextRow = myRow.nextSibling;
    if (colIndex &lt; maxColIndex) colIndex++;
    nextCell = nextRow.cells(colIndex);
    myCheckbox = nextCell.firstChild;
    myCheckbox.checked = checkValue;  
  } catch (e) {
    return;
  } 

  //recurse
  toggleChildren(myCheckbox.parentElement, colIndex, maxColIndex, checkValue);
    
}</t>
<t tx="ekr.20040220220152.3">function toggleParents(me, colIndex, maxColIndex, checkValue) {
  
  try {
    if (checkValue == undefined) checkValue = me.firstChild.checked;
    var myRow = me.parentElement;
    var nextRow = myRow.previousSibling;
	if (colIndex == nextRow.cells.length - 1) {
	  nextCell = nextRow.cells(colIndex);
	} else {
      colIndex--;
	  nextCell = nextRow.cells(colIndex);
    }
    myCheckbox = nextCell.firstChild;
    myCheckbox.checked = checkValue;  
  } catch (e) {
    return;
  } 

  //recurse
  toggleParents(myCheckbox.parentElement, colIndex, maxColIndex, checkValue);
}</t>
<t tx="ekr.20040221085319">@language java

&lt;&lt; copyright &gt;&gt;

// Arrays for nodes and icons
var nodes			= new Array();;
var openNodes	= new Array();
var icons			= new Array(6);

@others

// Push and pop not implemented in IE
if(!Array.prototype.push) {
	function array_push() {
		for(var i=0;i&lt;arguments.length;i++)
			this[this.length]=arguments[i];
		return this.length;
	}
	Array.prototype.push = array_push;
}

if(!Array.prototype.pop) {
	function array_pop(){
		lastElement = this[this.length-1];
		this.length = Math.max(this.length-1,0);
		return lastElement;
	}
	Array.prototype.pop = array_pop;
}
</t>
<t tx="ekr.20040221085319.1">// Loads all icons used in the tree.

function preloadIcons() {
	icons[0] = new Image();
	icons[0].src = "img/plus.gif";
	icons[1] = new Image();
	icons[1].src = "img/plusbottom.gif";
	icons[2] = new Image();
	icons[2].src = "img/minus.gif";
	icons[3] = new Image();
	icons[3].src = "img/minusbottom.gif";
	icons[4] = new Image();
	icons[4].src = "img/folder.gif";
	icons[5] = new Image();
	icons[5].src = "img/folderopen.gif";
}
</t>
<t tx="ekr.20040221085319.2">// Create the tree.

function createTree(arrName, startNode, openNode) {
	nodes = arrName;
	if (nodes.length &gt; 0) {
		preloadIcons();
		if (startNode == null) startNode = 0;
		if (openNode != 0 || openNode != null) setOpenNodes(openNode);
	
		if (startNode !=0) {
			var nodeValues = nodes[getArrayId(startNode)].split("|");
			document.write(
				"&lt;a href=\""
				+ nodeValues[3]
				+ "\" onmouseover=\"window.status='"
				+ nodeValues[2]
				+ "';return true;"
				+ "\" onmouseout=\"window.status=' ';"
				+ "return true;"
				+ "\"&gt;
				+ "&lt;img src=\"img/folderopen.gif\" align=\"absbottom\" alt=\"\" /&gt;"
				+ nodeValues[2]
				+ "&lt;/a&gt;&lt;br /&gt;");
		}
		else
			document.write(
				"&lt;img src=\"img/base.gif\" align=\"absbottom\" alt=\"\" /&gt;Website&lt;br /&gt;");
	
		var recursedNodes = new Array();
		addNode(startNode, recursedNodes);
	}
}
</t>
<t tx="ekr.20040221085319.3">// Return the position of a node in the array.

function getArrayId(node) {
	for (i=0; i&lt;nodes.length; i++) {
		var nodeValues = nodes[i].split("|");
		if (nodeValues[0]==node)
			return i;
	}
}
</t>
<t tx="ekr.20040221085319.4">// Puts in array nodes that will be open

function setOpenNodes(openNode) {
	for (i=0; i&lt;nodes.length; i++) {
		var nodeValues = nodes[i].split("|");
		if (nodeValues[0]==openNode) {
			openNodes.push(nodeValues[0]);
			setOpenNodes(nodeValues[1]);
		}
	} 
}
</t>
<t tx="ekr.20040221085319.5">// Return true if node is open.

function isNodeOpen(node) {
	for (i=0; i&lt;openNodes.length; i++)
		if (openNodes[i]==node)
			return true;
	return false;
}
</t>
<t tx="ekr.20040221085319.7">// Return ture if node has children.

function hasChildNode(parentNode) {
	for (i=0; i&lt; nodes.length; i++) {
		var nodeValues = nodes[i].split("|");
		if (nodeValues[1] == parentNode)
			return true;
	}
	return false;
}
</t>
<t tx="ekr.20040221085319.8">// Return true if node is the last sibling.

function lastSibling (node, parentNode) {
	var lastChild = 0;
	for (i=0; i&lt; nodes.length; i++) {
		var nodeValues = nodes[i].split("|");
		if (nodeValues[1] == parentNode)
			lastChild = nodeValues[0];
	}
	if (lastChild==node) return true;
	return false;
}
</t>
<t tx="ekr.20040221085319.9">// Adds a new node to the tree
function addNode(parentNode, recursedNodes) {
	for (var i = 0; i &lt; nodes.length; i++) {
		var nodeValues = nodes[i].split("|");
		if (nodeValues[1] == parentNode) {
			var ls	= lastSibling(nodeValues[0], nodeValues[1]);
			var hcn	= hasChildNode(nodeValues[0]);
			var ino = isNodeOpen(nodeValues[0]);
			&lt;&lt; Write out line &amp; empty icons &gt;&gt;
			&lt;&lt; put in array line &amp; empty icons &gt;&gt;
			&lt;&lt; Write out join icons &gt;&gt;
			&lt;&lt; Start link &gt;&gt;
			&lt;&lt; Write out folder &amp; page icons &gt;&gt;
			document.write(nodeValues[2]); // Write node name
			document.write("&lt;/a&gt;&lt;br /&gt;"); // End link
			if (hcn) { // Node has children.
				&lt;&lt; write out divs and recurse &gt;&gt;
			}
			recursedNodes.pop();  // remove last line or empty icon 
		}
	}
}</t>
<t tx="ekr.20040221085319.10">// Opens or closes a node
function oc(node, bottom) {
	var theDiv = document.getElementById("div" + node);
	var theJoin	= document.getElementById("join" + node);
	var theIcon = document.getElementById("icon" + node);
	
	if (theDiv.style.display == 'none') {
		if (bottom==1) theJoin.src = icons[3].src;
		else theJoin.src = icons[2].src;
		theIcon.src = icons[5].src;
		theDiv.style.display = '';
	} else {
		if (bottom==1) theJoin.src = icons[1].src;
		else theJoin.src = icons[0].src;
		theIcon.src = icons[4].src;
		theDiv.style.display = 'none';
	}
}
</t>
<t tx="ekr.20040221090505">for (g=0; g&lt;recursedNodes.length; g++) {
	if (recursedNodes[g] == 1)
		document.write(
			"&lt;img src=\"img/line.gif\" align=\"absbottom\" alt=\"\" /&gt;");
	else
		document.write(
			"&lt;img src=\"img/empty.gif\" align=\"absbottom\" alt=\"\" /&gt;");
}</t>
<t tx="ekr.20040221090505.1">if (ls)
	recursedNodes.push(0);
else
	recursedNodes.push(1);</t>
<t tx="ekr.20040221090505.2">if (hcn) {
	if (ls) {
		document.write(
			"&lt;a href=\"javascript: oc("
			+ nodeValues[0]
			+ ", 1);\"&gt;&lt;img id=\"join"
			+ nodeValues[0] + "\" src=\"img/");
		if (ino) document.write("minus");
		else document.write("plus");
		document.write("bottom.gif\" align=\"absbottom\" alt=\"Open/Close node\" /&gt;&lt;/a&gt;");
	} else {
		document.write(
			"&lt;a href=\"javascript: oc("
			+ nodeValues[0]
			+ ", 0);\"&gt;&lt;img id=\"join"
			+ nodeValues[0]
			+ "\" src=\"img/");
		if (ino) document.write("minus");
		else document.write("plus");
		document.write(".gif\" align=\"absbottom\" alt=\"Open/Close node\" /&gt;&lt;/a&gt;");
	}
} else {
	if (ls)
		document.write("&lt;img src=\"img/joinbottom.gif\" align=\"absbottom\" alt=\"\" /&gt;");
	else
		document.write("&lt;img src=\"img/join.gif\" align=\"absbottom\" alt=\"\" /&gt;");
}</t>
<t tx="ekr.20040221090505.3">document.write(
	"&lt;a href=\""
	+ nodeValues[3]
	+ "\" onmouseover=\"window.status='"
	+ nodeValues[2]
	+ "';return true;\" onmouseout=\"window.status=' ';return true;\"&gt;");</t>
<t tx="ekr.20040221090505.4">if (hcn) {
	document.write(
		"&lt;img id=\"icon"
		+ nodeValues[0]
		+ "\" src=\"img/folder")
	if (ino) document.write("open");
	document.write(".gif\" align=\"absbottom\" alt=\"Folder\" /&gt;");
}
else
	document.write(
		"&lt;img id=\"icon"
		+ nodeValues[0]
		+ "\" src=\"img/page.gif\" align=\"absbottom\" alt=\"Page\" /&gt;");</t>
<t tx="ekr.20040221090505.5">document.write("&lt;div id=\"div" + nodeValues[0] + "\"");
if (!ino) document.write(" style=\"display: none;\"");
document.write("&gt;");
addNode(nodeValues[0], recursedNodes);
document.write("&lt;/div&gt;");</t>
<t tx="ekr.20040221091434">@language html

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;

&lt;html&gt;

&lt;head&gt;
&lt;&lt; head &gt;&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;&lt; body &gt;&gt;
&lt;/body&gt;

&lt;/html&gt;</t>
<t tx="ekr.20040221091434.2">&lt;title&gt;Destroydrop &amp;raquo; Javascripts &amp;raquo; Tree &amp;raquo; v1&lt;/title&gt;

&lt;meta http-equiv="content-type" content="text/html;charset=iso-8859-1" /&gt;
&lt;link rel="StyleSheet" href="/dd.css" type="text/css" media="all" /&gt;
&lt;link rel="shortcut icon" href="/favicon.ico" /&gt;

&lt;link rel="StyleSheet" href="tree.css" type="text/css" /&gt;
&lt;script type="text/javascript" src="tree.js"&gt;&lt;/script&gt;</t>
<t tx="ekr.20040221091434.3">&lt;div id="shadow"&gt;

	&lt;div id="content"&gt;

		&lt;div id="location"&gt;
			&lt;h1&gt;&lt;a href="/"&gt;Destroydrop&lt;/a&gt; &amp;raquo; &lt;a href="/javascripts/"&gt;Javascripts&lt;/a&gt; &amp;raquo; &lt;a href="/javascripts/tree/"&gt;Tree&lt;/a&gt; &amp;raquo; &lt;a href="/javascripts/tree/v1/"&gt;V1&lt;/a&gt;&lt;/h1&gt;
		&lt;/div&gt;


		&lt;div class="line"&gt;&lt;/div&gt;


		&lt;div id="main"&gt;

			&lt;h3&gt;Description&lt;/h3&gt;
			&lt;div class="line"&gt;&lt;/div&gt;
			&lt;div class="item"&gt;
				&lt;p&gt;The tree has been tested on IE 5.0, 5.5, 6.0 on Windows, IE 5.0 on Mac, Opera 7, and various versions of Netscape 6.0 and Mozilla.&lt;/p&gt;
				&lt;p&gt;&amp;raquo; Konqueror 2+: "style.display" can't be changed&lt;/p&gt;
				&lt;p&gt;A new version of the tree will be ready soon.&lt;/p&gt;

			&lt;/div&gt;

			&lt;h3&gt;Example&lt;/h3&gt;
			&lt;div class="line"&gt;&lt;/div&gt;
			&lt;div class="item"&gt;

				&lt;div class="tree"&gt;
				&lt;script type="text/javascript"&gt;
				&lt;!--
					var Tree = new Array;var n = 0;
					// nodeId | parentNodeId | nodeName | nodeUrl
					Tree[n++]  = "1|0|Page 1|#";
					Tree[n++]	 = "2|1|Page 1.1|#";
					Tree[n++]  = "3|1|Page 1.2|#";
					Tree[n++]  = "4|3|Page 1.2.1|#";
					Tree[n++]  = "5|1|Page 1.3|#";
					Tree[n++]  = "6|2|Page 1.1.1|#";
					Tree[n++]  = "7|6|Page 1.1.1.1|#";
					Tree[n++]  = "8|6|Page 1.1.1.2|#";
					Tree[n++]  = "9|1|Page 1.4|#";
					Tree[n++]  = "10|9|Page 1.4.1|#";
					Tree[n++] = "11|4|Page 1.2.1.1|#";
					Tree[n++] = "12|6|Page 1.1.1.3|#";
					Tree[n++] = "13|10|Page 1.4.1.1|#";
					Tree[n++] = "14|6|Page 1.1.1.4|#";
					Tree[n++] = "15|6|Page 1.1.1.5|#";
					Tree[n++] = "16|6|Page 1.1.1.6|#";
					Tree[n++] = "17|14|Page 1.1.1.4.1|#";
					Tree[n++] = "18|2|Page 1.1.2|#";
					Tree[n++] = "19|14|Page 1.1.1.4.2|#";
					Tree[n++] = "20|16|Page 1.1.1.6.1|#";
					Tree[n++] = "21|16|Page 1.1.1.6.2|#";
					Tree[n++] = "22|0|Page 2|#";
					Tree[n++] = "23|0|Page 3|#";
					Tree[n++] = "24|23|Page 3|#";
					Tree[n++] = "25|24|Page 3|#";
					Tree[n++] = "26|25|Page 3|#";
					Tree[n++] = "27|26|Page 3|#";
					Tree[n++] = "28|27|Page 3|#";
					Tree[n++] = "29|28|Page 3|#";
					Tree[n++] = "30|29|Page 3|#";
					Tree[n++] = "31|0|Page 4|#";

					// treeArray, startNode, openNode
					// startNode and openNode are optional
					createTree(Tree, 0, 4);
				//--&gt;
				&lt;/script&gt;
				&lt;/div&gt;

			&lt;/div&gt;

		&lt;/div&gt;

		&lt;div id="extra"&gt;

			&lt;h3&gt;Download&lt;/h3&gt;
			&lt;div class="line"&gt;&lt;/div&gt;
			&lt;div class="item"&gt;
				&lt;ul class="nav"&gt;
					&lt;li&gt;&lt;a href="tree.js"&gt;tree.js&lt;/a&gt; - right click and save as&lt;/li&gt;
					&lt;li&gt;&lt;a href="tree.zip"&gt;tree.zip&lt;/a&gt; - tree.js with examples&lt;/li&gt;
				&lt;/ul&gt;
			&lt;/div&gt;

		&lt;/div&gt;


		&lt;div class="line"&gt;&lt;/div&gt;


		&lt;div id="copy"&gt;
			&lt;p class="right"&gt;&lt;a href="http://validator.w3.org/check/referer"&gt;XHTML&lt;/a&gt;, &lt;a href="http://jigsaw.w3.org/css-validator/check/referer"&gt;CSS&lt;/a&gt;&lt;/p&gt;
			&lt;p&gt;&lt;a href="mailto&amp;#58;drop&amp;#64;destroydrop&amp;#46;com"&gt;&amp;copy;2002-2003 Geir Landr&amp;ouml;&lt;/a&gt;&lt;/p&gt;
		&lt;/div&gt;

	&lt;/div&gt;

&lt;/div&gt;</t>
<t tx="ekr.20040221091434.4">/**************************************************************************
	Copyright (c) 2001-2003 Geir Landrö (drop@destroydrop.com)
	JavaScript Tree - www.destroydrop.com/hjavascripts/tree/
	Version 0.96	

	This script can be used freely as long as all copyright messages are intact.
**************************************************************************/</t>
<t tx="ekr.20040221092401">@language html

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;

&lt;html&gt;

&lt;head&gt;
	&lt;title&gt;Destroydrop &amp;raquo; Javascripts &amp;raquo; Tree&lt;/title&gt;

	&lt;link rel="StyleSheet" href="dtree.css" type="text/css" /&gt;
	&lt;script type="text/javascript" src="dtree.js"&gt;&lt;/script&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;&lt;a href="/"&gt;Destroydrop&lt;/a&gt; &amp;raquo; &lt;a href="/javascripts/"&gt;Javascripts&lt;/a&gt; &amp;raquo; &lt;a href="/javascripts/tree/"&gt;Tree&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;div class="dtree"&gt;

	&lt;p&gt;&lt;a href="javascript: d.openAll();"&gt;open all&lt;/a&gt; | &lt;a href="javascript: d.closeAll();"&gt;close all&lt;/a&gt;&lt;/p&gt;

	&lt;script type="text/javascript"&gt;
		&lt;!--

		d = new dTree('d');

		d.add(0,-1,'My example tree');
		d.add(1,0,'Node 1','example01.html');
		d.add(2,0,'Node 2','example01.html');
		d.add(3,1,'Node 1.1','example01.html');
		d.add(4,0,'Node 3','example01.html');
		d.add(5,3,'Node 1.1.1','example01.html');
		d.add(6,5,'Node 1.1.1.1','example01.html');
		d.add(7,0,'Node 4','example01.html');
		d.add(8,1,'Node 1.2','example01.html');
		d.add(9,0,'My Pictures','example01.html','Pictures I\'ve taken over the years','','','img/imgfolder.gif');
		d.add(10,9,'The trip to Iceland','example01.html','Pictures of Gullfoss and Geysir');
		d.add(11,9,'Mom\'s birthday','example01.html');
		d.add(12,0,'Recycle Bin','example01.html','','','img/trash.gif');

		document.write(d);

		//--&gt;
	&lt;/script&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="mailto&amp;#58;drop&amp;#64;destroydrop&amp;#46;com"&gt;&amp;copy;2002-2003 Geir Landr&amp;ouml;&lt;/a&gt;&lt;/p&gt;

&lt;/body&gt;

&lt;/html&gt;</t>
</tnodes>
</leo_file>
