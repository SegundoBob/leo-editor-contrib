<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="86" clone_windows="0"/>
<globals body_outline_ratio="0.45231958762886598">
	<global_window_position top="29" left="320" height="794" width="882"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="ekr.20040221095727"><vh>@url http://www.destroydrop.com/javascripts/tree/</vh></v>
<v t="ekr.20040221155447"><vh>dtree.css</vh></v>
<v t="ekr.20040223002040"><vh>To do</vh></v>
<v t="ekr.20040223095356" tnodeList="ekr.20040223095356,ekr.20040223095356.1,ekr.20040223095356.3,ekr.20040224034642,ekr.20040223095356.4,ekr.20040223095356.5,ekr.20040223095356.6,ekr.20040223095356.7,ekr.20040223095356.8,ekr.20040223095356.9,ekr.20040223095356.10,ekr.20040223095356.11,ekr.20040223095356.12,ekr.20040223095356.13,ekr.20040223095356.14,ekr.20040223095356.15,ekr.20040223095356.16,ekr.20040223095356.17,ekr.20040223095356.19,ekr.20040223095356.20,ekr.20040223095356.21,ekr.20040223095356.22,ekr.20040223095356.23,ekr.20040223095356.24,ekr.20040223095356.25,ekr.20040223095356.27,ekr.20040223095356.28,ekr.20040223095356.29,ekr.20040223095356.30,ekr.20040223095356.31"><vh>@file dtree.js</vh>
<v t="ekr.20040223095356.1"><vh>&lt;&lt; copyright &gt;&gt;</vh></v>
<v t="ekr.20040223095356.2"><vh>ctor...</vh>
<v t="ekr.20040223095356.3"><vh> dTree (ctor)</vh></v>
<v t="ekr.20040224034642"><vh>addv (EKR: called by statically generated html file)</vh></v>
<v t="ekr.20040223095356.4"><vh>add (called by init once for every vnode)</vh></v>
<v t="ekr.20040223095356.5"><vh>addNode (use arr)(called by toString)</vh></v>
<v t="ekr.20040223095356.6"><vh>Node</vh></v>
<v t="ekr.20040223095356.7"><vh>node (called by addNode) (bad recursion?)</vh>
<v t="ekr.20040223095356.8"><vh>&lt;&lt; configure for icons &gt;&gt;</vh></v>
<v t="ekr.20040223095356.9"><vh>&lt;&lt; configure for url &gt;&gt;</vh></v>
<v t="ekr.20040223095356.10"><vh>&lt;&lt; configure for children &gt;&gt; (bad recursion)</vh></v>
</v>
</v>
<v t="ekr.20040223095356.11" a="E"><vh>toString (EKR: added textarea)</vh></v>
<v t="ekr.20040223095356.12"><vh>indent</vh>
<v t="ekr.20040223095356.13"><vh>&lt;&lt; add child line &gt;&gt;</vh></v>
<v t="ekr.20040223095356.14"><vh>&lt;&lt; add image line &gt;&gt;</vh></v>
</v>
<v t="ekr.20040223095356.15"><vh>setCS</vh></v>
<v t="ekr.20040223095356.16"><vh>getSelected</vh></v>
<v t="ekr.20040223095356.17"><vh>s (highlight selected node)</vh></v>
<v t="ekr.20040223095356.18"><vh>open/close...</vh>
<v t="ekr.20040223095356.19"><vh>openAll &amp; closeAll</vh></v>
<v t="ekr.20040223095356.20"><vh>o</vh></v>
<v t="ekr.20040223095356.21"><vh>oAll</vh></v>
<v t="ekr.20040223095356.22"><vh>openTo</vh></v>
<v t="ekr.20040223095356.23"><vh>closeLevel</vh></v>
<v t="ekr.20040223095356.24"><vh>closeAllChildren</vh></v>
<v t="ekr.20040223095356.25"><vh>nodeStatus</vh></v>
</v>
<v t="ekr.20040223095356.26"><vh>Cookies...</vh>
<v t="ekr.20040223095356.27"><vh>clearCookie</vh></v>
<v t="ekr.20040223095356.28"><vh>setCookie</vh></v>
<v t="ekr.20040223095356.29"><vh>getCookie</vh></v>
<v t="ekr.20040223095356.30"><vh>updateCookie</vh></v>
<v t="ekr.20040223095356.31"><vh>isOpen</vh></v>
</v>
</v>
<v t="ekr.20040221155216.1"><vh>leoDHTML.html (works only on desktop)</vh>
<v t="ekr.20040222182811"><vh>html  (body sets onLoad)</vh>
<v t="ekr.20040221155223" a="E"><vh>&lt;&lt; head &gt;&gt;</vh>
<v t="ekr.20040222172538" a="E"><vh>ekr functions</vh>
<v t="ekr.20040223165342"><vh>createStaticOutline</vh></v>
<v t="ekr.20040222175623.1"><vh>createOutline</vh>
<v t="ekr.20040222185752"><vh>&lt;&lt; compute v,vLevel,h,t,tx,a &gt;&gt;</vh></v>
</v>
<v t="ekr.20040222094029.2" a="E"><vh>createTable</vh></v>
<v t="ekr.20040222175623"><vh>dumpTable</vh>
<v t="ekr.20040222123020"><vh>&lt;&lt; dump global info &gt;&gt;</vh></v>
<v t="ekr.20040222120605"><vh>&lt;&lt; dump info &gt;&gt;</vh></v>
</v>
<v t="ekr.20040222093752"><vh>loadxml</vh></v>
<v t="ekr.20040222094029"><vh>onLoad (not used)</vh></v>
<v t="ekr.20040222114837"><vh>vnodeLevel</vh></v>
<v t="ekr.20040222094029.1"><vh>dump utils</vh></v>
</v>
</v>
<v t="ekr.20040221155447.1" a="E"><vh>&lt;&lt; body &gt;&gt; specify load file</vh></v>
</v>
</v>
<v t="ekr.20040224031400" a="ETV"><vh>script to create leoDHTM.html</vh>
<v t="ekr.20040224130551"><vh>chooseIcon</vh></v>
<v t="ekr.20040224031400.1"><vh>createHTML</vh></v>
<v t="ekr.20040224043140"><vh>escape</vh></v>
<v t="ekr.20040224031400.3"><vh>writeHead</vh></v>
<v t="ekr.20040224033443"><vh>writeBody</vh></v>
<v t="ekr.20040224033443.1" a="EM"><vh>writeOutlineDef</vh></v>
<v t="ekr.20040224034642.1"><vh>write</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20040221095727">@nocolor

This is the url from which I downloaded dtree.*

I (Edward K. Ream) made the following minor modifications to the dtree routines:

- added the body ivar.
- added a textarea to dtree.toString routine.
- replaced the root icon with the Leo icon.
- removed lots of redundant semicolons.
- clarified code by creating sections.
- Replaced str + by array join in addNode.

/*--------------------------------------------------|
| dTree 2.05 | www.destroydrop.com/javascript/tree/ |
|---------------------------------------------------|
| Copyright (c) 2002-2003 Geir Landr√∂               |
|                                                   |
| This script can be used freely as long as all     |
| copyright messages are intact.                    |
|                                                   |
| Updated: 17.04.2003                               |
|--------------------------------------------------*/</t>
<t tx="ekr.20040221155216.1">@language html
@tabwidth 4

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;

&lt;html&gt;

@others

&lt;/html&gt;
</t>
<t tx="ekr.20040221155223">&lt;title&gt;leoDHTML.leo&lt;/title&gt;

&lt;link rel="StyleSheet" href="dtree.css" type="text/css" /&gt;

&lt;script type="text/javascript" src="dtree.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

    var xmldoc=null
    var gUrl=null
	var gFile=null
    var txArr=null
    var vnodes=null
    var tnodes=null
    
    // Define all methods
    @others

&lt;/script&gt;</t>
<t tx="ekr.20040221155447">.dtree {
    font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
    font-size: 11px;
    color: #666;
    white-space: nowrap;
}
.dtree img {
    border: 0px;
    vertical-align: middle;
}
.dtree a {
    color: #333;
    text-decoration: none;
}
.dtree a.node, .dtree a.nodeSel {
    white-space: nowrap;
    padding: 1px 2px 1px 2px;
}
.dtree a.node:hover, .dtree a.nodeSel:hover {
    color: #333;
    text-decoration: underline;
}
.dtree a.nodeSel {
    background-color: #c0d2ec;
}
.dtree .clip {
    overflow: hidden;
}
</t>
<t tx="ekr.20040221155447.1">@comment //

&lt;h2&gt;leoDHTML.leo&lt;/h2&gt;

&lt;div class="dtree"&gt;

    &lt;p&gt;
    &lt;a href="javascript: d.openAll();"&gt;open all&lt;/a&gt; |
    &lt;a href="javascript: d.closeAll();"&gt;close all&lt;/a&gt;
    &lt;/p&gt;

    &lt;script type="text/javascript"&gt;
    // This is executed _before_ the onLoad routine!
    file = 'c:/prog/showLeo/leoDHTML.html'
    webFile = "http://webpages.charter.net/edreamleo/leoDHTML.html"
    if (0)
        loadxml('c:/prog/showLeo/demo.leo',file)
    else if (0)
        loadxml('c:/prog/showLeo/leoDHTML.leo',file)
    else if (0)
        loadxml("http://webpages.charter.net/edreamleo/leoDHTML.leo",webFile)
	else
		createStaticOutline(file)
    &lt;/script&gt;

&lt;/div&gt;


</t>
<t tx="ekr.20040222093752">function loadxml(url,file)
{
	gUrl = url
	gFile = file
    if (document.implementation &amp;&amp; document.implementation.createDocument) {
        xmldoc = document.implementation.createDocument("","",none)
        xmldoc.onload = createTable
        xmldoc.load(url)
    }
    else if (typeof ActiveXObject != "undefined") {
        xmldoc = new ActiveXObject("Msxml.DOMDocument")
        xmldoc.onreadystatechange = function () {
            if (xmldoc.readyState == 4) createTable()
        }
        xmldoc.load(url)
    }
    else alert("This browser can not load xml file")
}</t>
<t tx="ekr.20040222094029">function onLoad(file) {
    loadxml(file)
}</t>
<t tx="ekr.20040222094029.1">function para() { write("&lt;p&gt;") }
function endp() { write("&lt;/p&gt;") }
function write(s) { document.write(s) }</t>
<t tx="ekr.20040222094029.2">function createTable()
{
    // var vnodesElement = xmldoc.getElementsByTagName("vnodes")
    vnodes = xmldoc.getElementsByTagName("v")
    tnodes = xmldoc.getElementsByTagName("t")
    
    // Remember all tnode indices.
    txArr = new Array()
    for (i=0;i&lt;tnodes.length;i++) {
        var t = tnodes[i]
        var tx = t.getAttribute("tx")
        txArr[tx] = t
    }
    
    if (0)
        dumpTable()
    else
        createOutline()
}
</t>
<t tx="ekr.20040222114837">function vnodeLevel(v)
{
    var level = -1
    while (v.parentNode!=null) {
        v = v.parentNode
        level += 1
    }
    return level - 2 // adjust for vnode &amp; document nodes.
}</t>
<t tx="ekr.20040222120605">
para()
if (0) {
    // Probably detecting clones should be left to the xml to xml translator.
    // Dectecting clones is easy inside Leo, hard here.
    var prevT = tnodeCounts[tx]
    if (prevT!=undefined) write("join: " + tx)
    tnodeCounts[tx]=tx
}
vLevel = vnodeLevel(v)
write("level: " + vLevel)
write(", delta: " + (vLevel-level))
level = vLevel
write(", v.h: " + h.text)
write(", v.tx: " + tx)
if (a) write(", attr=" + a)
write(", v.t: " + t.text.length)
endp()

if (0) { // doesn't work yet
    para()
    allChildren = v.childNodes
    for (j=0;j&lt;allChildren.length;j++) {
        vChildren = allChildren[j].getElementsByTagName("v")
        n = vChildren.length
        // write(n)
        if (n!=undefined &amp;&amp; n &gt; 0) {
            write(n + " children") ; break
        }
    }
    endp()
}</t>
<t tx="ekr.20040222123020">para()
write(vnodes.length + " vnodes, ")
write(tnodes.length + " tnodes")
endp()</t>
<t tx="ekr.20040222172538">@comment //</t>
<t tx="ekr.20040222175623">function dumpTable()
{
    &lt;&lt; dump global info &gt;&gt;
    
    var tnodeCounts = new Array() // to detect joined nodes.
    var level = 0 ; var vLevel = 0
    
    for (i=0;i&lt;vnodes.length;i++) {
        var v = vnodes[i]
        var headlines = v.getElementsByTagName("vh")
        var h = headlines[0]
        var tx = v.getAttribute("t")
        var t = txArr[tx]
        var a = v.getAttribute("a")
        &lt;&lt; dump info &gt;&gt;
    }
}</t>
<t tx="ekr.20040222175623.1">function createOutline()
{
    var id=0 ; var level=0 ; var vLevel=0
    var isOpen=true ; var icon=null
    var parent=new Array() ; var p=0
    
    d = new dTree('d')
    parent[level] = 0
    d.add(id++,-1,gUrl,"",gFile,"","",icon,icon,isOpen)
    for (i=0;i&lt;vnodes.length;i++) {
        &lt;&lt; compute v,vLevel,h,t,tx,a &gt;&gt;
		if (0) {
			vLevel++ // The outer item is level 0.
			p = parent[vLevel-1]
			level = vLevel
			parent[vLevel]=id // Set the new parent at this level
			isOpen = (a &amp;&amp; a.indexOf("E") != -1)
			body = t.text
			icon = (body!=null &amp;&amp; body.length &gt; 0) ? 'box01.GIF' : 'box00.GIF'
			d.add(id++,p,h,body,gFile,"","",icon,icon,isOpen)
		}
		else {
			body = t.text
			icon = (body!=null &amp;&amp; body.length &gt; 0) ? 'box01.GIF' : 'box00.GIF'
			d.add(id++,0,h,body,gFile,"","",icon,icon,isOpen)  // All at same level
		}
    }
    document.write(d)
}</t>
<t tx="ekr.20040222182811">@comment //

&lt;head&gt;
&lt;&lt; head &gt;&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;&lt; body &gt;&gt;
&lt;/body&gt;</t>
<t tx="ekr.20040222185752">var v = vnodes[i]
var vLevel = vnodeLevel(v)
var headlines = v.getElementsByTagName("vh")
var h = headlines[0].text
var tx = v.getAttribute("t")
var t = txArr[tx]
var a = v.getAttribute("a")</t>
<t tx="ekr.20040223002040">@nocolor

** Speed up dtree widget using n_pid (pid of next sibling)

- Put tree in a scrolling frame.</t>
<t tx="ekr.20040223095356">@language java
@tabwidth 4

&lt;&lt; copyright &gt;&gt;

@others

// If Push and pop is not implemented by the browser
if (!Array.prototype.push) {
    Array.prototype.push = function array_push() {
        for(var i=0;i&lt;arguments.length;i++)
            this[this.length]=arguments[i]
        return this.length
    }
}

if (!Array.prototype.pop) {
    Array.prototype.pop = function array_pop() {
        lastElement = this[this.length-1]
        this.length = Math.max(this.length-1,0)
        return lastElement
    }
}</t>
<t tx="ekr.20040223095356.1">/*--------------------------------------------------|
| dTree 2.05 | www.destroydrop.com/javascript/tree/ |
|---------------------------------------------------|
| Copyright (c) 2002-2003 Geir Landr√∂               |
|                                                   |
| This script can be used freely as long as all     |
| copyright messages are intact.                    |
|                                                   |
| Updated: 17.04.2003                               |
|--------------------------------------------------*/</t>
<t tx="ekr.20040223095356.2"></t>
<t tx="ekr.20040223095356.3">function dTree(objName) {
    this.config = {
        target         : null,
        folderLinks    : true,
        useSelection   : true,
        useCookies     : true,
        useLines       : true,
        useIcons       : true,
        useStatusText  : false,
        closeSameLevel : false,
        inOrder        : false
    }
    this.icon = {
        root        : 'LeoWin.gif', // 'img/base.gif'
        folder      : 'folder.gif',
        folderOpen  : 'folderopen.gif',
        node        : 'page.gif',
        empty       : 'empty.gif',
        line        : 'line.gif',
        join        : 'join.gif',
        joinBottom  : 'joinbottom.gif',
        plus        : 'plus.gif',
        plusBottom  : 'plusbottom.gif',
        minus       : 'minus.gif',
        minusBottom : 'minusbottom.gif',
        nlPlus      : 'nolines_plus.gif',
        nlMinus     : 'nolines_minus.gif'
    };
    this.obj = objName
    this.aNodes = []
    this.aIndent = []
    this.root = new Node(-1)
    this.selectedNode = null
    this.selectedFound = false
    this.completed = false
}</t>
<t tx="ekr.20040223095356.4">// Adds a new node to the node array.

// id       Number Unique identity number. 
// pid      Number Number refering to the parent node. The value for the root node has to be -1. 
// name     String Text label for the node. 
// url      String Url for the node. 
// title    String Title for the node. 
// target   String Target for the node. 
// icon     String Image file to use as the icon. Uses default if not specified. 
// iconOpen String Image file to use as the open icon. Uses default if not specified. 
// open     Boolean Is the node open.

dTree.prototype.add = function(id, pid, name, body, url, title, target, icon, iconOpen, open)
{
    this.aNodes[this.aNodes.length] =
        new Node(id, pid, name, body, url, title, target, icon, iconOpen, open)
}</t>
<t tx="ekr.20040223095356.5">// Creates the tree structure
dTree.prototype.addNode = function(pNode)
{
    // alert("addNode")
    var arr = new Array()
    var n=0
    if (this.config.inOrder) n = pNode._ai
    for (n; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == pNode.id) {
            var cn = this.aNodes[n]
            cn._p = pNode
            cn._ai = n
            this.setCS(cn) // This might also be pretty slow.
            if (!cn.target &amp;&amp; this.config.target)
                cn.target = this.config.target
            if (cn._hc &amp;&amp; !cn._io &amp;&amp; this.config.useCookies)
                cn._io = this.isOpen(cn.id)
            if (!this.config.folderLinks &amp;&amp; cn._hc)
                cn.url = null
            if (this.config.useSelection &amp;&amp; cn.id == this.selectedNode &amp;&amp; !this.selectedFound) {
                cn._is = true
                this.selectedNode = n
                this.selectedFound = true
            }
            arr.push(this.node(cn, n)) // EKR: A big speedup.
            if (cn._ls) break
        }
    }
    return arr.join(' ')
    return str
}</t>
<t tx="ekr.20040223095356.6">// Node object.

// id       Number Unique identity number. 
// pid      Number Number refering to the parent node. The value for the root node has to be -1. 
// name     String Text label for the node. 
// url      String Url for the node. 
// title    String Title for the node. 
// target   String Target for the node. 
// icon     String Image file to use as the icon. Uses default if not specified. 
// iconOpen String Image file to use as the open icon. Uses default if not specified. 
// open     Boolean Is the node open.

function Node(id, pid, name, body, url, title, target, icon, iconOpen, open) {
    this.id = id
    this.pid = pid
    this.name = name
    this.body = body // ekr
    this.url = url
    this.title = title
    this.target = target
    this.icon = icon
    this.iconOpen = iconOpen
    this._io = open || false
    this._is = false
    this._ls = false
    this._hc = false
    this._ai = 0
    this._p
}</t>
<t tx="ekr.20040223095356.7">// Creates the node icon, url and text
dTree.prototype.node = function(node, nodeId)
{
    var arr = new Array()
    arr.push('&lt;div class="dTreeNode"&gt;' + this.indent(node, nodeId))

    if (this.config.useIcons) {
        &lt;&lt; configure for icons &gt;&gt;
    }

    if (node.url) {
        &lt;&lt; configure for url &gt;&gt;
    }
    else if ((!this.config.folderLinks || !node.url) &amp;&amp; node._hc &amp;&amp; node.pid != this.root.id)
        arr.push('&lt;a href="javascript: ' + this.obj + '.o(' + nodeId + ');" class="node"&gt;')

    arr.push(node.name)
    
    if (node.url || ((!this.config.folderLinks || !node.url) &amp;&amp; node._hc))
        arr.push('&lt;/a&gt;')
        
    arr.push('&lt;/div&gt;')
    if (node._hc) {
        &lt;&lt; configure for children &gt;&gt;
    }
    this.aIndent.pop()
    return arr.join(' ')
}</t>
<t tx="ekr.20040223095356.8">if (!node.icon) node.icon =
    (this.root.id == node.pid) ?
    this.icon.root :
    ((node._hc) ? this.icon.folder : this.icon.node);

if (!node.iconOpen)
    node.iconOpen = (node._hc) ? this.icon.folderOpen : this.icon.node;

if (this.root.id == node.pid) {
    node.icon = this.icon.root;
    node.iconOpen = this.icon.root;
}

arr.push(
    '&lt;img id="i' + this.obj + nodeId
    + '" src="'
    + ((node._io) ? node.iconOpen : node.icon)
    + '" alt="" /&gt;')</t>
<t tx="ekr.20040223095356.9">arr.push('&lt;a id="s' + this.obj + nodeId + '" class="' +
    ((this.config.useSelection) ? ((node._is ? 'nodeSel' : 'node')) : 'node')
    + '" href="' + node.url + '"')

if (node.title)
    arr.push(str += ' title="' + node.title + '"')

if (node.target)
    arr.push(' target="' + node.target + '"')

if (this.config.useStatusText)
    arr.push(' onmouseover="window.status=\''
    + node.name
    + '\';return true;" onmouseout="window.status=\'\';return true;" ')

if (this.config.useSelection &amp;&amp; ((node._hc &amp;&amp; this.config.folderLinks) || !node._hc))
    arr.push(' onclick="javascript: ' + this.obj + '.s(' + nodeId + ');"')

arr.push('&gt;')</t>
<t tx="ekr.20040223095356.10">arr.push('&lt;div id="d' + this.obj
    + nodeId + '" class="clip" style="display:'
    + ((this.root.id == node.pid || node._io) ? 'block' : 'none')
    + ';"&gt;')
    
// EKR: this recursion could be very slow.
arr.push(this.addNode(node))
arr.push('&lt;/div&gt;')
</t>
<t tx="ekr.20040223095356.11">// Output the tree to the page.

dTree.prototype.toString = function()
{
    var str = '&lt;div class="dtree"&gt;\n'

    if (document.getElementById) {
        if (this.config.useCookies)
            this.selectedNode = this.getSelected()
        str += this.addNode(this.root)
    }
    else
        str += 'Browser not supported.'
        
	if (1) { // Added by EKR
		if (this.selectedNode==null || this.selectedNode==undefined)
			body = ""
		else
			body = this.aNodes[this.selectedNode].body
	
		str += '&lt;TEXTAREA name="bodyPane" ROWS="15" COLS="90" WRAP="OFF"&gt;'
			+ body
			+ '&lt;/TEXTAREA&gt;'
	}

    str += '&lt;/div&gt;'
    if (!this.selectedFound) this.selectedNode = null
    this.completed = true
    return str
}

</t>
<t tx="ekr.20040223095356.12">// Adds the empty and line icons.

dTree.prototype.indent = function(node, nodeId)
{
    var str = ''
    if (this.root.id != node.pid) {
        for (var n=0; n&lt;this.aIndent.length; n++)
            str += '&lt;img src="'
            + ((this.aIndent[n] == 1 &amp;&amp; this.config.useLines) ? this.icon.line : this.icon.empty)
            + '" alt="" /&gt;'

        this.aIndent.push(node._ls ? 0 : 1)
    
        if (node._hc) {
            &lt;&lt; add child line &gt;&gt;
        }
        else {
            &lt;&lt; add image line &gt;&gt;
        }
    }
    return str
}</t>
<t tx="ekr.20040223095356.13">str += '&lt;a href="javascript: '
+ this.obj + '.o(' + nodeId + ');"&gt;'
+ '&lt;img id="j' + this.obj + nodeId
+ '" src="';
if (!this.config.useLines)
    str += (node._io) ? this.icon.nlMinus : this.icon.nlPlus;
else
    str += (
        (node._io) ?
        ((node._ls &amp;&amp; this.config.useLines) ? this.icon.minusBottom : this.icon.minus) :
        ((node._ls &amp;&amp; this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) );
str += '" alt="" /&gt;&lt;/a&gt;';</t>
<t tx="ekr.20040223095356.14">str += '&lt;img src="'
    + ((this.config.useLines) ?
        ((node._ls) ? this.icon.joinBottom : this.icon.join ) :
        this.icon.empty)
    + '" alt="" /&gt;'</t>
<t tx="ekr.20040223095356.15">// Sets node._ls if node is the last sibling.

dTree.prototype.setCS = function(node)
{
    var lastId

    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.id) node._hc = true
        if (this.aNodes[n].pid == node.pid) lastId = this.aNodes[n].id
    }

    if (lastId==node.id) node._ls = true
}</t>
<t tx="ekr.20040223095356.16">// Returns the selected node.

dTree.prototype.getSelected = function()
{
    var sn = this.getCookie('cs' + this.obj)
    
    return (sn) ? sn : null
}</t>
<t tx="ekr.20040223095356.17">// Highlights the selected node.

dTree.prototype.s = function(id)
{
    if (!this.config.useSelection) return;
    
    var cn = this.aNodes[id]
    
    if (cn._hc &amp;&amp; !this.config.folderLinks) return;

    if (this.selectedNode != id) {
        if (this.selectedNode || this.selectedNode==0) {
            eOld = document.getElementById("s" + this.obj + this.selectedNode)
            eOld.className = "node"
        }

        eNew = document.getElementById("s" + this.obj + id)
        eNew.className = "nodeSel"
        this.selectedNode = id

        if (this.config.useCookies)
            this.setCookie('cs' + this.obj, cn.id)
    }
}</t>
<t tx="ekr.20040223095356.18"></t>
<t tx="ekr.20040223095356.19">// Open/close all nodes
dTree.prototype.openAll = function() {
    this.oAll(true);
};

dTree.prototype.closeAll = function() {
    this.oAll(false);
};</t>
<t tx="ekr.20040223095356.20">// Toggle Open or close

dTree.prototype.o = function(id)
{
    var cn = this.aNodes[id]
    
    this.nodeStatus(!cn._io, id, cn._ls);
    cn._io = !cn._io
    
    if (this.config.closeSameLevel)
        this.closeLevel(cn)
    if (this.config.useCookies)
        this.updateCookie()
}</t>
<t tx="ekr.20040223095356.21">// Open or close all nodes
dTree.prototype.oAll = function(status) {
    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n]._hc &amp;&amp; this.aNodes[n].pid != this.root.id) {
            this.nodeStatus(status, n, this.aNodes[n]._ls)
            this.aNodes[n]._io = status
        }
    }
    if (this.config.useCookies)
        this.updateCookie()
}</t>
<t tx="ekr.20040223095356.22">// Opens the tree to a specific node
dTree.prototype.openTo = function(nId, bSelect, bFirst) {
    if (!bFirst) {
        for (var n=0; n&lt;this.aNodes.length; n++) {
            if (this.aNodes[n].id == nId) {
                nId=n;
                break;
            }
        }
    }
    var cn=this.aNodes[nId];
    if (cn.pid==this.root.id || !cn._p) return;
    cn._io = true;
    cn._is = bSelect;
    if (this.completed &amp;&amp; cn._hc) this.nodeStatus(true, cn._ai, cn._ls);
    if (this.completed &amp;&amp; bSelect) this.s(cn._ai);
    else if (bSelect) this._sn=cn._ai;
    this.openTo(cn._p._ai, false, true);
};

</t>
<t tx="ekr.20040223095356.23">// Closes all nodes on the same level as certain node
dTree.prototype.closeLevel = function(node)
{
    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.pid &amp;&amp; this.aNodes[n].id != node.id &amp;&amp; this.aNodes[n]._hc) {
            this.nodeStatus(false, n, this.aNodes[n]._ls);
            this.aNodes[n]._io = false;
            this.closeAllChildren(this.aNodes[n]);
        }
    }
}</t>
<t tx="ekr.20040223095356.24">// Closes all children of a node
dTree.prototype.closeAllChildren = function(node) {
    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.id &amp;&amp; this.aNodes[n]._hc) {
            if (this.aNodes[n]._io) this.nodeStatus(false, n, this.aNodes[n]._ls);
            this.aNodes[n]._io = false;
            this.closeAllChildren(this.aNodes[n]);		
        }
    }
}
</t>
<t tx="ekr.20040223095356.25">// Change the status of a node(open or closed).

dTree.prototype.nodeStatus = function(status, id, bottom)
{
    eDiv	 = document.getElementById('d' + this.obj + id)
    eJoin	= document.getElementById('j' + this.obj + id)

    if (this.config.useIcons) {
        eIcon	= document.getElementById('i' + this.obj + id)
        eIcon.src = (status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon
    }

    eJoin.src = (this.config.useLines)?
        ((status)?
         ((bottom)?this.icon.minusBottom : this.icon.minus):
         ((bottom)?this.icon.plusBottom  : this.icon.plus)
        )
        :
        ((status)?this.icon.nlMinus:this.icon.nlPlus)

    eDiv.style.display = (status) ? 'block': 'none'
}</t>
<t tx="ekr.20040223095356.26"></t>
<t tx="ekr.20040223095356.27">// [Cookie] Clears a cookie
dTree.prototype.clearCookie = function()
{
    var now = new Date()
    var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24)

    this.setCookie('co'+this.obj, 'cookieValue', yesterday)
    this.setCookie('cs'+this.obj, 'cookieValue', yesterday)
}</t>
<t tx="ekr.20040223095356.28">// [Cookie] Sets value in a cookie
dTree.prototype.setCookie = function(cookieName, cookieValue, expires, path, domain, secure)
{
    document.cookie =
        escape(cookieName) + '=' + escape(cookieValue)
        + (expires ? '; expires=' + expires.toGMTString() : '')
        + (path ? '; path=' + path : '')
        + (domain ? '; domain=' + domain : '')
        + (secure ? '; secure' : '')
}</t>
<t tx="ekr.20040223095356.29">// [Cookie] Gets a value from a cookie.

dTree.prototype.getCookie = function(cookieName)
{
    var cookieValue = ''
    var posName = document.cookie.indexOf(escape(cookieName) + '=')

    if (posName != -1) {
        var posValue = posName + (escape(cookieName) + '=').length
        var endPos   = document.cookie.indexOf(';', posValue)

        if (endPos != -1)
            cookieValue = unescape(document.cookie.substring(posValue, endPos))
        else
            cookieValue = unescape(document.cookie.substring(posValue))
    }

    return (cookieValue);
}</t>
<t tx="ekr.20040223095356.30">// [Cookie] Returns ids of open nodes as a string.

dTree.prototype.updateCookie = function()
{
    var str = ''

    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n]._io &amp;&amp; this.aNodes[n].pid != this.root.id) {
            if (str) str += '.'
            str += this.aNodes[n].id
        }
    }
    this.setCookie('co' + this.obj, str)
}</t>
<t tx="ekr.20040223095356.31">// [Cookie] Checks if a node id is in a cookie.

dTree.prototype.isOpen = function(id)
{
    var aOpen = this.getCookie('co' + this.obj).split('.');
    for (var n=0; n&lt;aOpen.length; n++)
        if (aOpen[n] == id) return true;
    return false;
};</t>
<t tx="ekr.20040223165342">function createStaticOutline(file)
{
	// alert("createStaticOutline")
	gFile = file

	var icon = 'box01.GIF'
	var body = "node body"

	d = new dTree('d')
	
	d.add(0,-1,'EKR example tree',body,gFile,"","",icon,icon)
	d.add(1,0,'Node 1',           body,gFile,"","",icon,icon)
	d.add(2,0,'Node 2',           body,gFile,"","",icon,icon)
	d.add(3,1,'Node 1.1',         body,gFile,"","",icon,icon)
	d.add(4,0,'Node 3',           body,gFile,"","",icon,icon)
	d.add(5,3,'Node 1.1.1',       body,gFile,"","",icon,icon)
	d.add(6,5,'Node 1.1.1.1',     body,gFile,"","",icon,icon)
	d.add(7,0,'Node 4',           body,gFile,"","",icon,icon)
	d.add(8,1,'Node 1.2',         body,gFile,"","",icon,icon)

	document.write(d)
}</t>
<t tx="ekr.20040224031400">@language python

from leoGlobals import *

global f,fileName

f = None
fileName ="c:/prog/showLeo/leoDHTML.html"

@others

createHTML()

es("wrote: " + shortFileName(fileName),color="blue")
</t>
<t tx="ekr.20040224031400.1">def createHTML():
	
	global f,fileName
	try:
		f = open(fileName,'w')
	except:
		f = None
		
	if f is None:
		es("can not open: " + fileName)
		return

	write('&lt;!DOCTYPE html PUBLIC %s %s&gt;' % (
		"-//W3C//DTD XHTML 1.0 Strict//EN",
		"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"))
	write('&lt;html&gt;')
	writeHead()
	writeBody()
	write('&lt;/html&gt;')

	f.close()</t>
<t tx="ekr.20040224031400.3">def writeHead():

	global fileName

	write('&lt;head&gt;')
	write('&lt;title&gt;%s&lt;/title&gt;' % fileName)
	write('&lt;link rel="StyleSheet" href="dtree.css" type="text/css" /&gt;')
	write('&lt;script type="text/javascript" src="dtree.js"&gt;&lt;/script&gt;')
	write('&lt;/head&gt;')</t>
<t tx="ekr.20040224033443">def writeBody():
	
	global fileName

	write('&lt;h2&gt;%s&lt;/h2&gt;' % shortFileName(fileName))
	write('&lt;div class="dtree"&gt;')
	write('&lt;p&gt;')
	write('&lt;a href="javascript: d.openAll();"&gt;open all&lt;/a&gt; |')
	write('&lt;a href="javascript: d.closeAll();"&gt;close all&lt;/a&gt;')
	write('&lt;/p&gt;')
	write('&lt;p&gt;This script has only been tested on IE 6 running on XP&lt;/p&gt;')
	write('&lt;p&gt;This demo does not support syntax coloring as the real Leo does&lt;/p&gt;')
	write("&lt;p&gt;To do: put outline in an iFrame element so its size won't change&lt;/p&gt;")
	write('&lt;script type="text/javascript"&gt;')
	writeOutlineDef()
	write('&lt;/script&gt;')
	write('&lt;/div&gt;')

</t>
<t tx="ekr.20040224033443.1">def writeOutlineDef():
	
	c = top()

	# Assign pid's.
	v = c.rootVnode()
	id = 1 # The dummy root has id 0.
	while (v):
		v.pid = id ; id += 1
		v = v.threadNext()
	
	write('d = new dTree("d")')
	
	url = escape(fileName)

	# Write the dummy root.
	write('d.addv(%s,%s,%s,%s,%s,%s,%s,%s)' % (
		0,-1,-1,'"root"','"root body"',url,"null","false"))

	v = c.rootVnode()
	while(v):
		p = v.parent() ; n = v.next()
		p_pid, n_pid = 0,-1 # Use dummy root for the parent by default.
		if p: p_pid = p.pid
		if n: n_pid = n.pid
		head = escape(v.headString())
		body = escape(v.bodyString())
		icon = chooseIcon(v)
		expanded=choose(v.isExpanded(),'1','0')
		write('d.addv(%s,%s,%s,%s,%s,%s,%s,%s)' % (
			v.pid,p_pid,n_pid,head,body,url,icon,expanded))
		v = v.threadNext()

	write('document.write(d)')</t>
<t tx="ekr.20040224034642">// dTree.prototype.add = function(id, pid, name, body, url, title, target, icon, iconOpen, open)

dTree.prototype.addv = function(id,pid,npid,head,body,gFile,icon,expanded)
{
	// npid not used at present.
	this.add(id,pid,head,body,gFile,"","",icon,icon,expanded)
}
</t>
<t tx="ekr.20040224034642.1">def write(s):
	
	global f

	s = toEncodedString(s,app.config.default_derived_file_encoding)
	f.write(s + '\n')</t>
<t tx="ekr.20040224043140">@
Escapes backslash, single and double quotes and '&lt;'.
The '%' character is not esacped at present.
Control characters are not escaped at present.

This routine is itself a good test of whether escape sequences are handled correctly.
@c
	
def escape(s):
	
	"""Perform javascript and html escapes on sting s."""

	newline = (
		'"'  + # end the string contant
		'+'  + # javascript plus
		'\n' + # go to next line
		'"'  + # start next string
		'\\n') # newline in string

	s = s.replace('&amp;',"&amp;amp;") # Do this first so inserted '&amp;' don't get replaced.
	s = s.replace('"',"&amp;quot;") # No trailing e!
	s = s.replace('&lt;',"&amp;lt;")
	s = s.replace('\\',"\\\\")
	s = s.replace('\n',newline)
	s = s.replace('\t'," "*4) # 4-space tabs
	
	return '"%s"' % s # Enclose everything in double quotes.
</t>
<t tx="ekr.20040224130551">def chooseIcon(v):
	
	import leoNodes
	
	# Always recompute icon.
	val = v.iconVal = v.computeIcon()
	assert(0 &lt;= val &lt;= 15)
	return '"icons/box%02d.GIF"' % val</t>
</tnodes>
</leo_file>
