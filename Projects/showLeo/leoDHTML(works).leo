<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="46" clone_windows="0"/>
<globals body_outline_ratio="0.45231958762886598">
	<global_window_position top="45" left="314" height="794" width="882"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="ekr.20040221095727"><vh>@url http://www.destroydrop.com/javascripts/tree/</vh></v>
<v t="ekr.20040221155447"><vh>dtree.css</vh></v>
<v t="ekr.20040223002040" a="TV"><vh>To do</vh></v>
<v t="ekr.20040221092915" tnodeList="ekr.20040221092915,ekr.20040221093345,ekr.20040221093234,ekr.20040222194051,ekr.20040221093234.2,ekr.20040221093035,ekr.20040221093520,ekr.20040222214125.1,ekr.20040222214800,ekr.20040222214845,ekr.20040222213839,ekr.20040221094120,ekr.20040222212754,ekr.20040222212754.1,ekr.20040221094120.1,ekr.20040222213613,ekr.20040222213613.1,ekr.20040221093234.1,ekr.20040222213839.1,ekr.20040222213839.2,ekr.20040222213839.3,ekr.20040222213839.4,ekr.20040222213839.5,ekr.20040222213839.6,ekr.20040222224609,ekr.20040222224609.1,ekr.20040222224609.2,ekr.20040222224609.3,ekr.20040222224609.4"><vh>@file dtree.js</vh>
<v t="ekr.20040221093345"><vh>&lt;&lt; copyright &gt;&gt;</vh></v>
<v t="ekr.20040222214125"><vh>ctor...</vh>
<v t="ekr.20040221093234"><vh> dTree (ctor)</vh></v>
<v t="ekr.20040222194051"><vh>add</vh></v>
<v t="ekr.20040221093234.2"><vh>addNode</vh></v>
<v t="ekr.20040221093035"><vh>Node</vh></v>
<v t="ekr.20040221093520"><vh>node</vh>
<v t="ekr.20040222214125.1"><vh>&lt;&lt; configure for icons &gt;&gt;</vh></v>
<v t="ekr.20040222214800"><vh>&lt;&lt; configure for url &gt;&gt;</vh></v>
<v t="ekr.20040222214845"><vh>&lt;&lt; configure for children &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040222213839" a="E"><vh>toString (EKR: added textarea)</vh></v>
<v t="ekr.20040221094120"><vh>indent</vh>
<v t="ekr.20040222212754"><vh>&lt;&lt; add child line &gt;&gt;</vh></v>
<v t="ekr.20040222212754.1"><vh>&lt;&lt; add image line &gt;&gt;</vh></v>
</v>
<v t="ekr.20040221094120.1"><vh>setCS</vh></v>
<v t="ekr.20040222213613"><vh>getSelected</vh></v>
<v t="ekr.20040222213613.1"><vh>s (highlight selected node)</vh></v>
<v t="ekr.20040222213613.2"><vh>open/close...</vh>
<v t="ekr.20040221093234.1"><vh>openAll &amp; closeAll</vh></v>
<v t="ekr.20040222213839.1"><vh>o</vh></v>
<v t="ekr.20040222213839.2"><vh>oAll</vh></v>
<v t="ekr.20040222213839.3"><vh>openTo</vh></v>
<v t="ekr.20040222213839.4"><vh>closeLevel</vh></v>
<v t="ekr.20040222213839.5"><vh>closeAllChildren</vh></v>
<v t="ekr.20040222213839.6"><vh>nodeStatus</vh></v>
</v>
<v t="ekr.20040221093234.3"><vh>Cookies...</vh>
<v t="ekr.20040222224609"><vh>clearCookie</vh></v>
<v t="ekr.20040222224609.1"><vh>setCookie</vh></v>
<v t="ekr.20040222224609.2"><vh>getCookie</vh></v>
<v t="ekr.20040222224609.3"><vh>updateCookie</vh></v>
<v t="ekr.20040222224609.4"><vh>isOpen</vh></v>
</v>
</v>
<v t="ekr.20040221155216.1" tnodeList="ekr.20040221155216.1,ekr.20040222182811,ekr.20040221155223,ekr.20040222172538,ekr.20040222175623.1,ekr.20040222185752,ekr.20040222094029.2,ekr.20040222175623,ekr.20040222123020,ekr.20040222120605,ekr.20040222093752,ekr.20040222224129,ekr.20040222094029,ekr.20040222114837,ekr.20040222094029.1,ekr.20040221155447.1"><vh>@file showLeo.html</vh>
<v t="ekr.20040222182811" a="E"><vh>html  (body sets onLoad)</vh>
<v t="ekr.20040221155223"><vh>&lt;&lt; head &gt;&gt;</vh>
<v t="ekr.20040222172538" a="E"><vh>ekr functions</vh>
<v t="ekr.20040222175623.1"><vh>createOutline</vh>
<v t="ekr.20040222185752"><vh>&lt;&lt; compute v,vLevel,h,t,tx,a &gt;&gt;</vh></v>
</v>
<v t="ekr.20040222094029.2" a="E"><vh>createTable</vh></v>
<v t="ekr.20040222175623"><vh>dumpTable</vh>
<v t="ekr.20040222123020"><vh>&lt;&lt; dump global info &gt;&gt;</vh></v>
<v t="ekr.20040222120605"><vh>&lt;&lt; dump info &gt;&gt;</vh></v>
</v>
<v t="ekr.20040222093752"><vh>loadxml</vh></v>
<v t="ekr.20040222224129"><vh>onBodyPaneChange</vh></v>
<v t="ekr.20040222094029"><vh>onLoad (not used)</vh></v>
<v t="ekr.20040222114837"><vh>vnodeLevel</vh></v>
<v t="ekr.20040222094029.1"><vh>dump utils</vh></v>
</v>
</v>
<v t="ekr.20040221155447.1" a="E"><vh>&lt;&lt; body &gt;&gt;  div class=dtree</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20040221092915">@language java
@tabwidth 4

&lt;&lt; copyright &gt;&gt;

@others

// If Push and pop is not implemented by the browser
if (!Array.prototype.push) {
    Array.prototype.push = function array_push() {
        for(var i=0;i&lt;arguments.length;i++)
            this[this.length]=arguments[i]
        return this.length
    }
}

if (!Array.prototype.pop) {
    Array.prototype.pop = function array_pop() {
        lastElement = this[this.length-1]
        this.length = Math.max(this.length-1,0)
        return lastElement
    }
}</t>
<t tx="ekr.20040221093035">// Node object.

// id       Number Unique identity number. 
// pid      Number Number refering to the parent node. The value for the root node has to be -1. 
// name     String Text label for the node. 
// url      String Url for the node. 
// title    String Title for the node. 
// target   String Target for the node. 
// icon     String Image file to use as the icon. Uses default if not specified. 
// iconOpen String Image file to use as the open icon. Uses default if not specified. 
// open     Boolean Is the node open.

function Node(id, pid, name, body, url, title, target, icon, iconOpen, open) {
    this.id = id
    this.pid = pid
    this.name = name
    this.body = body // ekr
    this.url = url
    this.title = title
    this.target = target
    this.icon = icon
    this.iconOpen = iconOpen
    this._io = open || false
    this._is = false
    this._ls = false
    this._hc = false
    this._ai = 0
    this._p
}</t>
<t tx="ekr.20040221093234">function dTree(objName) {
    this.config = {
        target         : null,
        folderLinks    : true,
        useSelection   : true,
        useCookies     : true,
        useLines       : true,
        useIcons       : true,
        useStatusText  : false,
        closeSameLevel : false,
        inOrder        : true
    }
    this.icon = {
        root        : 'LeoWin.gif', // 'img/base.gif'
        folder      : 'img/folder.gif',
        folderOpen  : 'img/folderopen.gif',
        node        : 'img/page.gif',
        empty       : 'img/empty.gif',
        line        : 'img/line.gif',
        join        : 'img/join.gif',
        joinBottom  : 'img/joinbottom.gif',
        plus        : 'img/plus.gif',
        plusBottom  : 'img/plusbottom.gif',
        minus       : 'img/minus.gif',
        minusBottom : 'img/minusbottom.gif',
        nlPlus      : 'img/nolines_plus.gif',
        nlMinus     : 'img/nolines_minus.gif'
    };
    this.obj = objName
    this.aNodes = []
    this.aIndent = []
    this.root = new Node(-1)
    this.selectedNode = null
    this.selectedFound = false
    this.completed = false
}</t>
<t tx="ekr.20040221093234.1">// Open/close all nodes
dTree.prototype.openAll = function() {
    this.oAll(true);
};

dTree.prototype.closeAll = function() {
    this.oAll(false);
};</t>
<t tx="ekr.20040221093234.2">// Creates the tree structure
dTree.prototype.addNode = function(pNode) {
    var str = ''
    var n=0
    if (this.config.inOrder) n = pNode._ai
    for (n; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == pNode.id) {
            var cn = this.aNodes[n]
            cn._p = pNode
            cn._ai = n
            this.setCS(cn)
            if (!cn.target &amp;&amp; this.config.target)
                cn.target = this.config.target
            if (cn._hc &amp;&amp; !cn._io &amp;&amp; this.config.useCookies)
                cn._io = this.isOpen(cn.id)
            if (!this.config.folderLinks &amp;&amp; cn._hc)
                cn.url = null
            if (this.config.useSelection &amp;&amp; cn.id == this.selectedNode &amp;&amp; !this.selectedFound) {
                cn._is = true
                this.selectedNode = n
                this.selectedFound = true
            }
            str += this.node(cn, n)
            if (cn._ls) break
        }
    }
    return str
}</t>
<t tx="ekr.20040221093234.3"></t>
<t tx="ekr.20040221093345">/*--------------------------------------------------|
| dTree 2.05 | www.destroydrop.com/javascript/tree/ |
|---------------------------------------------------|
| Copyright (c) 2002-2003 Geir Landr√∂               |
|                                                   |
| This script can be used freely as long as all     |
| copyright messages are intact.                    |
|                                                   |
| Updated: 17.04.2003                               |
|--------------------------------------------------*/</t>
<t tx="ekr.20040221093520">// Creates the node icon, url and text
dTree.prototype.node = function(node, nodeId)
{
    var str = '&lt;div class="dTreeNode"&gt;' + this.indent(node, nodeId)

    if (this.config.useIcons) {
        &lt;&lt; configure for icons &gt;&gt;
    }

    if (node.url) {
        &lt;&lt; configure for url &gt;&gt;
    }
    else if ((!this.config.folderLinks || !node.url) &amp;&amp; node._hc &amp;&amp; node.pid != this.root.id)
        str += '&lt;a href="javascript: ' + this.obj + '.o(' + nodeId + ');" class="node"&gt;'

    str += node.name
    if (node.url || ((!this.config.folderLinks || !node.url) &amp;&amp; node._hc))
        str += '&lt;/a&gt;'
    str += '&lt;/div&gt;'
    if (node._hc) {
        &lt;&lt; configure for children &gt;&gt;
    }
    this.aIndent.pop()
    return str
}</t>
<t tx="ekr.20040221094120">// Adds the empty and line icons.

dTree.prototype.indent = function(node, nodeId)
{
    var str = ''
    if (this.root.id != node.pid) {
        for (var n=0; n&lt;this.aIndent.length; n++)
            str += '&lt;img src="'
            + ((this.aIndent[n] == 1 &amp;&amp; this.config.useLines) ? this.icon.line : this.icon.empty)
            + '" alt="" /&gt;'

        this.aIndent.push(node._ls ? 0 : 1)
    
        if (node._hc) {
            &lt;&lt; add child line &gt;&gt;
        }
        else {
            &lt;&lt; add image line &gt;&gt;
        }
    }
    return str
}</t>
<t tx="ekr.20040221094120.1">// Sets node._ls if node is the last sibling.

dTree.prototype.setCS = function(node)
{
    var lastId

    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.id) node._hc = true
        if (this.aNodes[n].pid == node.pid) lastId = this.aNodes[n].id
    }

    if (lastId==node.id) node._ls = true
}</t>
<t tx="ekr.20040221095727">@nocolor

This is the url from which I downloaded dtree.*

I (Edward K. Ream) made the following minor modifications to the dtree routines:

- added the body ivar.
- added a textarea to dtree.toString routine.
- replaced the root icon with the Leo icon.
- removed lots of redundant semicolons.
- clarified code by creating sections.

/*--------------------------------------------------|
| dTree 2.05 | www.destroydrop.com/javascript/tree/ |
|---------------------------------------------------|
| Copyright (c) 2002-2003 Geir Landr√∂               |
|                                                   |
| This script can be used freely as long as all     |
| copyright messages are intact.                    |
|                                                   |
| Updated: 17.04.2003                               |
|--------------------------------------------------*/</t>
<t tx="ekr.20040221155216.1">@language html
@tabwidth 4

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;

&lt;html&gt;

@others

&lt;/html&gt;
</t>
<t tx="ekr.20040221155223">&lt;title&gt;leoDHTML.leo&lt;/title&gt;

&lt;link rel="StyleSheet" href="dtree.css" type="text/css" /&gt;

&lt;script type="text/javascript" src="dtree.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

    var xmldoc=null
    var gUrl=null
    var txArr=null
    var vnodes=null
    var tnodes=null
    
    // Define all methods
    @others

&lt;/script&gt;</t>
<t tx="ekr.20040221155447">.dtree {
    font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
    font-size: 11px;
    color: #666;
    white-space: nowrap;
}
.dtree img {
    border: 0px;
    vertical-align: middle;
}
.dtree a {
    color: #333;
    text-decoration: none;
}
.dtree a.node, .dtree a.nodeSel {
    white-space: nowrap;
    padding: 1px 2px 1px 2px;
}
.dtree a.node:hover, .dtree a.nodeSel:hover {
    color: #333;
    text-decoration: underline;
}
.dtree a.nodeSel {
    background-color: #c0d2ec;
}
.dtree .clip {
    overflow: hidden;
}
</t>
<t tx="ekr.20040221155447.1">@comment //

&lt;h2&gt;leoDHTML.leo&lt;/h2&gt;

&lt;div class="dtree"&gt;

    &lt;p&gt;
    &lt;a href="javascript: d.openAll();"&gt;open all&lt;/a&gt; |
    &lt;a href="javascript: d.closeAll();"&gt;close all&lt;/a&gt;
    &lt;/p&gt;
    
    &lt;script type="text/javascript"&gt;
        // This is executed _before_ the onLoad routine!
        if (0)
            loadxml("c:/prog/test/small.leo")
        else
            loadxml("c:/prog/showLeo/leoDHTML.leo")

    &lt;/script&gt;

&lt;/div&gt;</t>
<t tx="ekr.20040222093752">function loadxml(url) {
    gUrl = url
    if (document.implementation &amp;&amp; document.implementation.createDocument) {
        xmldoc = document.implementation.createDocument("","",none)
        // xmldoc.onload = createTable
        xmldoc.load(url)
    }
    else if (typeof ActiveXObject != "undefined") {
        xmldoc = new ActiveXObject("Msxml.DOMDocument")
        xmldoc.onreadystatechange = function () {
            if (xmldoc.readyState == 4) createTable()
        }
        xmldoc.load(url)
    }
    // else alert("This browser can not load xml file")
}</t>
<t tx="ekr.20040222094029">function onLoad(file) {
    loadxml(file)
}
</t>
<t tx="ekr.20040222094029.1">function para() { write("&lt;p&gt;") }
function endp() { write("&lt;/p&gt;") }
function write(s) { document.write(s) }</t>
<t tx="ekr.20040222094029.2">function createTable()
{
    // var vnodesElement = xmldoc.getElementsByTagName("vnodes")
    vnodes = xmldoc.getElementsByTagName("v")
    tnodes = xmldoc.getElementsByTagName("t")
    
    // Remember all tnode indices.
    txArr = new Array()
    for (i=0;i&lt;tnodes.length;i++) {
        var t = tnodes[i]
        var tx = t.getAttribute("tx")
        txArr[tx] = t
    }
    
    if (0)
        dumpTable()
    else
        createOutline()
}
</t>
<t tx="ekr.20040222114837">function vnodeLevel(v)
{
    var level = -1
    while (v.parentNode!=null) {
        v = v.parentNode
        level += 1
    }
    return level - 2 // adjust for vnode &amp; document nodes.
}</t>
<t tx="ekr.20040222120605">
para()
if (0) {
    // Probably detecting clones should be left to the xml to xml translator.
    // Dectecting clones is easy inside Leo, hard here.
    var prevT = tnodeCounts[tx]
    if (prevT!=undefined) write("join: " + tx)
    tnodeCounts[tx]=tx
}
vLevel = vnodeLevel(v)
write("level: " + vLevel)
write(", delta: " + (vLevel-level))
level = vLevel
write(", v.h: " + h.text)
write(", v.tx: " + tx)
if (a) write(", attr=" + a)
write(", v.t: " + t.text)
endp()

if (0) { // doesn't work yet
    para()
    allChildren = v.childNodes
    for (j=0;j&lt;allChildren.length;j++) {
        vChildren = allChildren[j].getElementsByTagName("v")
        n = vChildren.length
        // write(n)
        if (n!=undefined &amp;&amp; n &gt; 0) {
            write(n + " children") ; break
        }
    }
    endp()
}</t>
<t tx="ekr.20040222123020">para()
write(vnodes.length + " vnodes, ")
write(tnodes.length + " tnodes")
endp()</t>
<t tx="ekr.20040222172538">@comment //</t>
<t tx="ekr.20040222175623">function dumpTable()
{
    &lt;&lt; dump global info &gt;&gt;
    
    var tnodeCounts = new Array() // to detect joined nodes.
    var level = 0 ; var vLevel = 0
    
    for (i=0;i&lt;vnodes.length;i++) {
        var v = vnodes[i]
        var headlines = v.getElementsByTagName("vh")
        var h = headlines[0]
        var tx = v.getAttribute("t")
        var t = txArr[tx]
        var a = v.getAttribute("a")
        &lt;&lt; dump info &gt;&gt;
    }
}</t>
<t tx="ekr.20040222175623.1">function createOutline()
{
    var file = 'showLeo.html'
    var id=0 ; var level=0 ; var vLevel=0
    var isOpen=true ; var icon=null
    var parent=new Array() ; var p=0
    
    d = new dTree('d')
    parent[level] = 0
    d.add(id++,-1,gUrl,"",file,"","",icon,icon,isOpen)
    for (i=0;i&lt;vnodes.length;i++) {
        &lt;&lt; compute v,vLevel,h,t,tx,a &gt;&gt;
        vLevel++ // The outer item is level 0.
        p = parent[vLevel-1]
        level = vLevel
        parent[vLevel]=id // Set the new parent at this level
        isOpen = (a &amp;&amp; a.indexOf("E") != -1)
        body = t.text
        icon = (body!=null &amp;&amp; body.length &gt; 0) ? 'box01.GIF' : 'box00.GIF'
        d.add(id++,p,h,body,file,"","",icon,icon,isOpen)
    }
    document.write(d)
}</t>
<t tx="ekr.20040222182811">@comment //

&lt;head&gt;
&lt;&lt; head &gt;&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;&lt; body &gt;&gt;
&lt;/body&gt;</t>
<t tx="ekr.20040222185752">var v = vnodes[i]
var vLevel = vnodeLevel(v)
var headlines = v.getElementsByTagName("vh")
var h = headlines[0].text
var tx = v.getAttribute("t")
var t = txArr[tx]
var a = v.getAttribute("a")</t>
<t tx="ekr.20040222194051">// Adds a new node to the node array.

// id       Number Unique identity number. 
// pid      Number Number refering to the parent node. The value for the root node has to be -1. 
// name     String Text label for the node. 
// url      String Url for the node. 
// title    String Title for the node. 
// target   String Target for the node. 
// icon     String Image file to use as the icon. Uses default if not specified. 
// iconOpen String Image file to use as the open icon. Uses default if not specified. 
// open     Boolean Is the node open.

dTree.prototype.add = function(id, pid, name, body, url, title, target, icon, iconOpen, open)
{
    this.aNodes[this.aNodes.length] =
        new Node(id, pid, name, body, url, title, target, icon, iconOpen, open)
}</t>
<t tx="ekr.20040222212754">str += '&lt;a href="javascript: '
+ this.obj + '.o(' + nodeId + ');"&gt;'
+ '&lt;img id="j' + this.obj + nodeId
+ '" src="';
if (!this.config.useLines)
    str += (node._io) ? this.icon.nlMinus : this.icon.nlPlus;
else
    str += (
        (node._io) ?
        ((node._ls &amp;&amp; this.config.useLines) ? this.icon.minusBottom : this.icon.minus) :
        ((node._ls &amp;&amp; this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) );
str += '" alt="" /&gt;&lt;/a&gt;';</t>
<t tx="ekr.20040222212754.1">str += '&lt;img src="'
    + ((this.config.useLines) ?
        ((node._ls) ? this.icon.joinBottom : this.icon.join ) :
        this.icon.empty)
    + '" alt="" /&gt;'</t>
<t tx="ekr.20040222213613">// Returns the selected node.

dTree.prototype.getSelected = function()
{
    var sn = this.getCookie('cs' + this.obj)
    
    return (sn) ? sn : null
}</t>
<t tx="ekr.20040222213613.1">// Highlights the selected node.

dTree.prototype.s = function(id)
{
    if (!this.config.useSelection) return;
    
    var cn = this.aNodes[id]
    
    if (cn._hc &amp;&amp; !this.config.folderLinks) return;

    if (this.selectedNode != id) {
        if (this.selectedNode || this.selectedNode==0) {
            eOld = document.getElementById("s" + this.obj + this.selectedNode)
            eOld.className = "node"
        }

        eNew = document.getElementById("s" + this.obj + id)
        eNew.className = "nodeSel"
        this.selectedNode = id

        if (this.config.useCookies)
            this.setCookie('cs' + this.obj, cn.id)
    }
}</t>
<t tx="ekr.20040222213613.2"></t>
<t tx="ekr.20040222213839">// Output the tree to the page.

dTree.prototype.toString = function()
{
    
    var str = '&lt;div class="dtree"&gt;\n'

    if (document.getElementById) {
        if (this.config.useCookies)
            this.selectedNode = this.getSelected()
        str += this.addNode(this.root)
    }
    else
        str += 'Browser not supported.'
        
    if (this.selectedNode==null)
        body = ""
    else
        body = this.aNodes[this.selectedNode].body

    str += '&lt;TEXTAREA name="bodyPane" ROWS="15" COLS="90" WRAP="OFF"&gt;'
        + body
        + '&lt;/TEXTAREA&gt;'

    str += '&lt;/div&gt;'
    if (!this.selectedFound) this.selectedNode = null
    this.completed = true
    return str
}</t>
<t tx="ekr.20040222213839.1">// Toggle Open or close

dTree.prototype.o = function(id)
{
    var cn = this.aNodes[id]
    
    this.nodeStatus(!cn._io, id, cn._ls);
    cn._io = !cn._io
    
    if (this.config.closeSameLevel)
        this.closeLevel(cn)
    if (this.config.useCookies)
        this.updateCookie()
}</t>
<t tx="ekr.20040222213839.2">// Open or close all nodes
dTree.prototype.oAll = function(status) {
    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n]._hc &amp;&amp; this.aNodes[n].pid != this.root.id) {
            this.nodeStatus(status, n, this.aNodes[n]._ls)
            this.aNodes[n]._io = status
        }
    }
    if (this.config.useCookies)
        this.updateCookie()
}</t>
<t tx="ekr.20040222213839.3">// Opens the tree to a specific node
dTree.prototype.openTo = function(nId, bSelect, bFirst) {
    if (!bFirst) {
        for (var n=0; n&lt;this.aNodes.length; n++) {
            if (this.aNodes[n].id == nId) {
                nId=n;
                break;
            }
        }
    }
    var cn=this.aNodes[nId];
    if (cn.pid==this.root.id || !cn._p) return;
    cn._io = true;
    cn._is = bSelect;
    if (this.completed &amp;&amp; cn._hc) this.nodeStatus(true, cn._ai, cn._ls);
    if (this.completed &amp;&amp; bSelect) this.s(cn._ai);
    else if (bSelect) this._sn=cn._ai;
    this.openTo(cn._p._ai, false, true);
};

</t>
<t tx="ekr.20040222213839.4">// Closes all nodes on the same level as certain node
dTree.prototype.closeLevel = function(node)
{
    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.pid &amp;&amp; this.aNodes[n].id != node.id &amp;&amp; this.aNodes[n]._hc) {
            this.nodeStatus(false, n, this.aNodes[n]._ls);
            this.aNodes[n]._io = false;
            this.closeAllChildren(this.aNodes[n]);
        }
    }
}</t>
<t tx="ekr.20040222213839.5">// Closes all children of a node
dTree.prototype.closeAllChildren = function(node) {
    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n].pid == node.id &amp;&amp; this.aNodes[n]._hc) {
            if (this.aNodes[n]._io) this.nodeStatus(false, n, this.aNodes[n]._ls);
            this.aNodes[n]._io = false;
            this.closeAllChildren(this.aNodes[n]);		
        }
    }
}
</t>
<t tx="ekr.20040222213839.6">// Change the status of a node(open or closed).

dTree.prototype.nodeStatus = function(status, id, bottom)
{
    eDiv	 = document.getElementById('d' + this.obj + id)
    eJoin	= document.getElementById('j' + this.obj + id)

    if (this.config.useIcons) {
        eIcon	= document.getElementById('i' + this.obj + id)
        eIcon.src = (status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon
    }

    eJoin.src = (this.config.useLines)?
        ((status)?
         ((bottom)?this.icon.minusBottom : this.icon.minus):
         ((bottom)?this.icon.plusBottom  : this.icon.plus)
        )
        :
        ((status)?this.icon.nlMinus:this.icon.nlPlus)

    eDiv.style.display = (status) ? 'block': 'none'
}</t>
<t tx="ekr.20040222214125"></t>
<t tx="ekr.20040222214125.1">if (!node.icon) node.icon =
    (this.root.id == node.pid) ?
    this.icon.root :
    ((node._hc) ? this.icon.folder : this.icon.node);

if (!node.iconOpen)
    node.iconOpen = (node._hc) ? this.icon.folderOpen : this.icon.node;

if (this.root.id == node.pid) {
    node.icon = this.icon.root;
    node.iconOpen = this.icon.root;
}
str +=
    '&lt;img id="i' + this.obj + nodeId
    + '" src="'
    + ((node._io) ? node.iconOpen : node.icon)
    + '" alt="" /&gt;';</t>
<t tx="ekr.20040222214800">str += '&lt;a id="s' + this.obj + nodeId + '" class="' +
    ((this.config.useSelection) ? ((node._is ? 'nodeSel' : 'node')) : 'node')
    + '" href="' + node.url + '"'

if (node.title)
    str += ' title="' + node.title + '"'

if (node.target)
    str += ' target="' + node.target + '"'

if (this.config.useStatusText)
    str += ' onmouseover="window.status=\''
    + node.name
    + '\';return true;" onmouseout="window.status=\'\';return true;" '

if (this.config.useSelection &amp;&amp; ((node._hc &amp;&amp; this.config.folderLinks) || !node._hc))
    str += ' onclick="javascript: ' + this.obj + '.s(' + nodeId + ');"'

str += '&gt;'</t>
<t tx="ekr.20040222214845">str += '&lt;div id="d' + this.obj
+ nodeId + '" class="clip" style="display:'
+ ((this.root.id == node.pid || node._io) ? 'block' : 'none')
+ ';"&gt;';
str += this.addNode(node);
str += '&lt;/div&gt;';</t>
<t tx="ekr.20040222224129">function onBodyPaneChange()
{
    alert(s)
    // var bodyPane = document.getElementById("bodyPane")
    // s = bodyPane.innerText
}</t>
<t tx="ekr.20040222224609">// [Cookie] Clears a cookie
dTree.prototype.clearCookie = function()
{
    var now = new Date()
    var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24)

    this.setCookie('co'+this.obj, 'cookieValue', yesterday)
    this.setCookie('cs'+this.obj, 'cookieValue', yesterday)
}</t>
<t tx="ekr.20040222224609.1">// [Cookie] Sets value in a cookie
dTree.prototype.setCookie = function(cookieName, cookieValue, expires, path, domain, secure)
{
    document.cookie =
        escape(cookieName) + '=' + escape(cookieValue)
        + (expires ? '; expires=' + expires.toGMTString() : '')
        + (path ? '; path=' + path : '')
        + (domain ? '; domain=' + domain : '')
        + (secure ? '; secure' : '')
}</t>
<t tx="ekr.20040222224609.2">// [Cookie] Gets a value from a cookie.

dTree.prototype.getCookie = function(cookieName)
{
    var cookieValue = ''
    var posName = document.cookie.indexOf(escape(cookieName) + '=')

    if (posName != -1) {
        var posValue = posName + (escape(cookieName) + '=').length
        var endPos   = document.cookie.indexOf(';', posValue)

        if (endPos != -1)
            cookieValue = unescape(document.cookie.substring(posValue, endPos))
        else
            cookieValue = unescape(document.cookie.substring(posValue))
    }

    return (cookieValue);
}</t>
<t tx="ekr.20040222224609.3">// [Cookie] Returns ids of open nodes as a string.

dTree.prototype.updateCookie = function()
{
    var str = ''

    for (var n=0; n&lt;this.aNodes.length; n++) {
        if (this.aNodes[n]._io &amp;&amp; this.aNodes[n].pid != this.root.id) {
            if (str) str += '.'
            str += this.aNodes[n].id
        }
    }
    this.setCookie('co' + this.obj, str)
}</t>
<t tx="ekr.20040222224609.4">// [Cookie] Checks if a node id is in a cookie.

dTree.prototype.isOpen = function(id)
{
    var aOpen = this.getCookie('co' + this.obj).split('.');
    for (var n=0; n&lt;aOpen.length; n++)
        if (aOpen[n] == id) return true;
    return false;
};</t>
<t tx="ekr.20040223002040">@nocolor

- Add demo nodes: clones, marked nodes, etc.
- Support mark icons.
- Write clone bit in Leo so can support clone icon.
- Find a faster tree widget.
	? Replace string cantenation?
- Put tree in a scrolling frame.

- Get ready to upload all this to the web site.
- Add comments at start of page regarding differences from actual Leo
	- Doesn't support clone mark yet.
	- No syntax coloring.
	- Outline pane is constant size. (can I change this)
	- bug:  toString routine doesn't print toString code well.
	- Outline pane doesn't scroll: changes size improperly.</t>
</tnodes>
</leo_file>
